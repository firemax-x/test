--v1
local Vglobais = {
    UserInputService = game:GetService("UserInputService"),
    RunService = game:GetService("RunService"),
    PhysicsService = game:GetService("PhysicsService"),
    ReplicatedStorage = game:GetService("ReplicatedStorage"),
    CharacterEvents = game:GetService("ReplicatedStorage"):WaitForChild("CharacterEvents"),
    Workspace = game:GetService("Workspace"),
    Debris = game:GetService("Debris"),
    Players = game:GetService("Players"),
    player = game:GetService("Players").LocalPlayer,
    bubbleChatConfig = game:GetService("TextChatService"):WaitForChild("BubbleChatConfiguration"),
    spawnPosition = Vector3.new(0, 100, 0),
    tpAG = false,
    killAG = false,
    mode = "Nothing"
}

if not Vglobais.Workspace:FindFirstChild("FireHub Folder") then
    Instance.new("Folder", Vglobais.Workspace).Name = "FireHub Folder"
end

local HttpService = game:GetService("HttpService")
Vglobais.Workspace.FallenPartsDestroyHeight = -50000
local ownerDropdown = nil
local coollabel = nil

--v2
local Toggle = {
    AntiPaint = false,
    AutoCasa = false,
    BlobAura = false,
    flying = false,
    allblobs = false,
    isKillAuraActive = false,
    Killaura2 = false,
    LoopRagdollWhitelist = false,
    SecurityMode = false,
    Rodadando = false,
    Altura = false,
    AntiKick = false,
    toggleActiveAntiKick = false,
    isRunning = false,
    lagStuff = false,
    Noclipeb = false,
    masslessgrab = false,
    antiblob3 = false,
    Antifiretg = false,
    MainPlayerT = false,
    AgToggle = false,
    SecretBlob = false,
    MaosBlobs = false,
    LoopRagdollAll = false,
    DropdownEnabled = false, 
    isRootAttachmentRemovalEnabled = false,
    colorPickerEnabled = false,
    characterAndBeamMoveEnabled = true,
    invisTouchEnabled = false,
    lBlob = false,
    BlobKick = false,
    BlobDt = false,
    ZoomToggle = false,
    kickaura = false,
    ativado = false,
    ativado1 = false,
    ativado2 = false,
    ativado3 = false,
    ativado4 = false,
    ativado5 = false,
    ativado6 = false,
    ativado7 = false,   
    ativado8 = false,
    PoisonToggle = false,
    InvisibleGrabEnabled = false,
    lowGravityEnabled = false,
    monitoring = false,
    bodyGyroEnabled = false,
    activeForB = false,
    activeForN = false,
    autoWhitelistEnabled = false,
    removeAllWhitelistEnabled = false
}
_G.isGrabbingEnabled = _G.isGrabbingEnabled or false
_G.Velocidade = _G.Velocidade or 0
_G.VelocidadeToggle = _G.VelocidadeToggle or false
_G.InfiniteJump = _G.InfiniteJump or false

local Valores = {
    FlySpeed = 0,
    HeightSpeed = 0,
    savedCFrame,
    HouseValue = nil,
    BlobSpeed = 20,
    Pguardada = nil,
    Vspeed = 50,
    jumpPower = 24,
    ZoomVeloc = 0,
    strength = 0,
    distanciat = 0,
    velocidadet = 0,
    distanciam = 0,
    velocidadem = 0,
    altura = 0,
    modelSpacing = 10,
    cimaRotacao = 0,
    ladoRotacao = 0,
    LoopSelectPlayer,
    controls = {},
    LoopKick = {},
    LoopList = {}, 
    originalColors = {},
    originalParents = {},
    monitoredCharacters = {},
    hanchor = {}, 
    Eixo = {
        X = 0,
        Y = 0,
        Z = 0
    }
}

local Connections = {
    camera = Workspace.CurrentCamera,
    vehicle = nil,
    firstOriginalColor = nil,
    MainPlayer = nil,
    selectedPlayer5 = nil,
    selectedPlayer4 = nil,
    selectedPlayer3 = nil,
    selectedPlayer2 = nil,
    selectedPlayer = nil,
    selectedmode = nil,
    selectedLoopedPlayer = nil,  
    childAddedConnection = nil,
    childAddedConnection2 = nil,
    renderSteppedConnection5,
    grabbingConnection = nil,
    connection = nil,
    connection2,
    dropdown = nil
}

local OthersV = {
    bp = nil,  
    character = Vglobais.player.Character or Vglobais.player.CharacterAdded:Wait(),
    Map51 = game.Workspace:FindFirstChild("Map"),
    camera = Vglobais.Workspace.CurrentCamera,
    mouse = Vglobais.player:GetMouse(),
    clouds = Vglobais.Workspace.Terrain:FindFirstChild("Clouds"),
    Sky = game.Lighting:FindFirstChild("Sky"),
    inv = workspace:FindFirstChild(Vglobais.player.Name .. "SpawnedInToys")
}

Vglobais.player.CharacterAdded:Connect(function(character)
    OthersV.character = character  
    OthersV.mouse = Vglobais.player:GetMouse()
end)

function dgl(part)
    Vglobais.ReplicatedStorage:WaitForChild("GrabEvents"):WaitForChild("DestroyGrabLine"):FireServer(part)
end

local SetNetworkOwnerEvent = Vglobais.ReplicatedStorage:FindFirstChild("GrabEvents"):FindFirstChild("SetNetworkOwner")

function IsAround(part, radius)
    return (part.Position - Vglobais.player.Character.HumanoidRootPart.Position).Magnitude <= radius
end

function invs_touch(part)
    if IsAround(part, 30) and not part:IsDescendantOf(Vglobais.player.Character) then
        SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
    end
end

local allowedUsers = {
    ["Anti_cheatbfbp"] = true,
    ["lxz_luah"] = true,  
}

local allowedPlayers = {
    {Name = "lxz_firemax", UserId = nil},
    {Name = "lxz_luah", UserId = 6206810514},
    {Name = "Anti_cheatbfbp", UserId = 6168002069},
    {Name = "account_kamado1", UserId = 2763995918},
    {Name = "misqusi", UserId = 1390422876},
    {Name = "fireknight_alt2", UserId = 7733789566}
}

local webhookURL = "https://discord.com/api/webhooks/1323062130517217371/hRsaeZDv_OQewhoNwiJxiLnbOQOSmsj84xpULdud2s4orhY2AFoOTcK8G0WFfT-r1l0N"

local HttpService = game:GetService("HttpService")

local function isFriendWithUser(player, targetUserId)
    local success, friends = pcall(function()
        return player:GetFriendsAsync()
    end)    if success then
        local friendsList = friends:GetFriends()
        for _, friend in ipairs(friendsList) do
            if friend.UserId == targetUserId then
                return true
            end
        end
    end
    return false
end

local function dssend(url, data)
    request({
        Url = url,
        Method = "POST",
        Headers = {["Content-Type"] = "application/json"},
        Body = HttpService:JSONEncode(data)
    })
end

local function sendToWebhook(player, status, reason)
    local statusText = status == "Entrou no script" and "**PERMITIDO**" or "**NÃO PERMITIDO**"
    local color = status == "Entrou no script" and 0x00FF00 or 0xFF0000

    local data = {
        username = "Security Bot",
        avatar_url = "https://www.example.com/avatar.png",
        embeds = {
            {
                title = "**Segurança: Ação Executada**",  
                description = string.format(
                    "Estado:  %s\n" ..
                    "\n" ..
                    "**Jogador:** %s\n" ..
                    "\n" ..
                    "**UserId:** %d\n" ..
                    "\n" ..
                    "Data: **%s**", 
                    statusText,
                    player.Name, 
                    player.UserId, 
                    os.date("%Y-%m-%d %H:%M:%S")
                ),
                color = color,
            }
        }
    }

    dssend(webhookURL, data)
end

local function sendChatMessage(message, color)
    local StarterGui = game:GetService("StarterGui")
    StarterGui:SetCore("ChatMakeSystemMessage", {
        Text = message,
        Color = color,
        Font = Enum.Font.GothamBold, -- Fonte mais elegante
        TextSize = 18
    })
end

function checkPlayer()
    local player = game.Players.LocalPlayer
    local playerName = player.Name
    local playerUserId = player.UserId

    for _, allowedPlayer in ipairs(allowedPlayers) do
        if playerName == allowedPlayer.Name or (allowedPlayer.UserId and playerUserId == allowedPlayer.UserId) then
            sendToWebhook(player, "Entrou no script", "Jogador permitido.")
            sendChatMessage("Access granted! Welcome, " .. playerName .. ".", Color3.fromRGB(0, 255, 0))
            return true
        end
    end

    for _, allowedPlayer in ipairs(allowedPlayers) do
        if allowedPlayer.UserId and isFriendWithUser(player, allowedPlayer.UserId) then
            sendToWebhook(player, "Entrou no script", "Jogador tem amigo permitido.")
            sendChatMessage("Access granted via friendship! Welcome, " .. playerName .. ".", Color3.fromRGB(0, 255, 0))
            return true
        end
    end

    sendToWebhook(player, "Não pode entrar", "Jogador não autorizado.")
    sendChatMessage("Access denied! You are not allowed to use this script.", Color3.fromRGB(255, 0, 0))
    player:Kick("Você não está autorizado a usar este script.")
    return false
end

checkPlayer()

function verify(part)
    if part and part:IsA("Part") then
        local partOwner = part:FindFirstChild("PartOwner")
        if partOwner and partOwner:IsA("StringValue") and partOwner.Value == Vglobais.player.Name then
            return true
        end
    else
        return false
    end

    local current = part.Parent
    while current do
        if current:IsA("Model") then
            for _, descendant in ipairs(current:GetDescendants()) do
                if descendant:IsA("Part") then
                    local descendantOwner = descendant:FindFirstChild("PartOwner")
                    if descendantOwner and descendantOwner:IsA("StringValue") then
                        if descendantOwner.Value == Vglobais.player.Name then
                            return true
                        else
                            return false
                        end
                    end
                end
            end
            break
        end
        current = current.Parent
    end

    return false
end

function invs_touch6(part, Modo, folder)
    if Modo == "Modo2" and folder then
        local insideParts = {}
        local outsideParts = {}
        local groupedParts = {}

        for _, obj in pairs(folder) do
            if obj:IsA("Model") and obj.PrimaryPart then
                local primaryPart = obj.PrimaryPart
                if IsAround(primaryPart, 30) then
                    table.insert(insideParts, obj)
                else
                    table.insert(outsideParts, obj)
                end
            end
        end

        for i = 1, #outsideParts do
            local group = {outsideParts[i]}
            for j = i + 1, #outsideParts do
                local dist = (outsideParts[i].PrimaryPart.CFrame.Position - outsideParts[j].PrimaryPart.CFrame.Position).Magnitude
                if dist <= 30 then
                    table.insert(group, outsideParts[j])
                end
            end
            if #group > 1 then
                table.insert(groupedParts, group)
            end
        end

        for _, group in pairs(groupedParts) do
            Valores.Pguardada = Vglobais.player.Character.HumanoidRootPart.CFrame
            Vglobais.player.Character.HumanoidRootPart.CFrame = group[1].PrimaryPart.CFrame

            for _, obj in pairs(group) do
                local part = obj.PrimaryPart
                local verified = false
                for _ = 1, 30 do
                    if not IsAround(part, 29) then
                        Vglobais.player.Character.HumanoidRootPart.CFrame = part.CFrame
                        task.wait(0.03)
                        SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
                    end

                    if IsAround(part, 29) then
                        if OthersV.camera and OthersV.camera.CFrame then
                            SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
                        end
                    end

                    if verify(part) then
                        verified = true
                        break
                    end

                    task.wait(0.005)
                end
                if verified then
                    break
                end
            end

            if Valores.Pguardada then
                Vglobais.player.Character.HumanoidRootPart.CFrame = Valores.Pguardada
            end
        end

        for _, obj in pairs(outsideParts) do
            local part = obj.PrimaryPart
            local isGrouped = false
            for _, group in pairs(groupedParts) do
                for _, groupedObj in pairs(group) do
                    if obj == groupedObj then
                        isGrouped = true
                        break
                    end
                end
                if isGrouped then break end
            end

            if not isGrouped then
                Valores.Pguardada = Vglobais.player.Character.HumanoidRootPart.CFrame
                Vglobais.player.Character.HumanoidRootPart.CFrame = part.CFrame

                local verified = false
                for _ = 1, 30 do
                    if not IsAround(part, 29) then
                        Vglobais.player.Character.HumanoidRootPart.CFrame = part.CFrame
                        task.wait(0.03)
                        SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
                    end

                    if IsAround(part, 29) then
                        if OthersV.camera and OthersV.camera.CFrame then
                            SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
                        end
                    end

                    if verify(part) then
                        verified = true
                        break
                    end

                    task.wait(0.001)
                end

                if verified then
                    break
                end

                if Valores.Pguardada then
                    Vglobais.player.Character.HumanoidRootPart.CFrame = Valores.Pguardada
                end
            end
        end
    else
        if IsAround(part, 29) and not part:IsDescendantOf(Vglobais.player.Character) then
            if OthersV.camera and OthersV.camera.CFrame then
                SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
            end
        else
            Valores.Pguardada = Vglobais.player.Character.HumanoidRootPart.CFrame
            Vglobais.player.Character.HumanoidRootPart.CFrame = part.CFrame

            while not IsAround(part, 27) do
                task.wait()
            end

            for _ = 1, 30 do
                if not IsAround(part, 29) then
                    Vglobais.player.Character.HumanoidRootPart.CFrame = part.CFrame
                    task.wait(0.03)
                end

                if IsAround(part, 29) then
                    if OthersV.camera and OthersV.camera.CFrame then
                        SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
                        SetNetworkOwnerEvent:FireServer(part, OthersV.camera.CFrame)
                    end
                end

                if verify(part) then
                    break
                end

                task.wait(0.001)
            end

            if Valores.Pguardada then
                Vglobais.player.Character.HumanoidRootPart.CFrame = Valores.Pguardada
            end
        end
    end
end

objectModel = game.Workspace.Map.AlwaysHereTweenedObjects.Ocean.Object.ObjectModel

function findItemInFront()
    local unitRay = OthersV.camera:ScreenPointToRay(OthersV.mouse.X, OthersV.mouse.Y)
    local ray = Ray.new(unitRay.Origin, unitRay.Direction * 10000)

    local part, position = Vglobais.Workspace:FindPartOnRay(ray, Vglobais.player.Character, false, true)
    if part and part:IsA("BasePart") and not part:IsDescendantOf(Vglobais.player.Character) then
        return part
    end
    return nil
end

--Logica do Script

function GucciAntiGrabLoop()
    while true do
        if Toggle.toggleActiveAntiKick then
            game:GetService("ReplicatedStorage"):WaitForChild("CharacterEvents"):WaitForChild("RagdollRemote"):FireServer(game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart"), 0)
        end
        task.wait(0.01)
    end
end 

coroutine.wrap(GucciAntiGrabLoop)()
----------------------------------------------------------------------
function alturaf()
    while Toggle.Altura do
        OthersV.character.Humanoid.HipHeight = OthersV.character.Humanoid.HipHeight + Valores.HeightSpeed 
        task.wait(0.01)
    end
end

function toggleHeight()
    Toggle.Altura = not Toggle.Altura
    if Toggle.Altura then
        Toggle.Rodadando = true
        alturaf()
    end
end
----------------------------------------------------------------------
function spawn_toy55()
    local hrp = Vglobais.player.Character:FindFirstChild("HumanoidRootPart")
    Vglobais.ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer("NinjaKunai", hrp.CFrame * CFrame.new(0, 0, 7), Vector3.new(0, 0, 0))
end

function checkAndSpawnKunai()
    while Toggle.AntiKick do
        local folder = workspace:FindFirstChild(Vglobais.player.Name .. "SpawnedInToys")
        local kunai = folder:FindFirstChild("NinjaKunai")

        if not kunai then
            spawn_toy55()
        else
            local stickyPart = kunai:FindFirstChild("StickyPart")
            local sp = kunai:FindFirstChild("SoundPart")
            local torso = Vglobais.player.Character and Vglobais.player.Character:FindFirstChild("Torso")

            if stickyPart and torso then
                local distance = (stickyPart.Position - torso.Position).Magnitude
                local distanceThreshold = 3

                if distance > distanceThreshold then
                    Vglobais.ReplicatedStorage:FindFirstChild("PlayerEvents"):FindFirstChild("StickyPartEvent"):FireServer(
                        stickyPart,
                        torso,
                        CFrame.new(0.4, -0.9, -0.1, -1.00000000, 0.00739139877, -0.999561906, -0.998452604, -0.0478846952, 0.0282763243, -0.0476547107, 0.99882561, 0.00000000000)
                        * CFrame.Angles(0, 180, 0)
                    )

                    task.wait(0.8)
                    distance = (stickyPart.Position - torso.Position).Magnitude

                    if distance > distanceThreshold then
                        Vglobais.ReplicatedStorage:FindFirstChild("MenuToys"):FindFirstChild("DestroyToy"):FireServer(kunai)
                        spawn_toy55()
                        task.wait()
                        invs_touch(sp)
                    end
                end
            end
        end
        task.wait(0.01)
    end
end

checkAndSpawnKunai()
----------------------------------------------------------------------
function toggleLag(value)
    Toggle.lagStuff = value
    if Toggle.lagStuff  then
        startLag()  
    end
end

function startLag()
    while Toggle.lagStuff do
        for i = 1, 1600 do
            local Grass = workspace:WaitForChild("Map"):WaitForChild("BaseGround"):WaitForChild("Grass")
            game:GetService("ReplicatedStorage"):WaitForChild("GrabEvents"):WaitForChild("CreateGrabLine"):FireServer(Grass, Grass.CFrame)
        end 
        task.wait(2.5)
    end
end
----------------------------------------------------------------------
PrivateProperties = {
    Color = Color3.fromRGB(128, 0, 128),
    Font = Enum.Font.SourceSansBold,
    TextSize = 18,
    lastRecipients = {}  -- Armazena os últimos destinatários
}

local Config2 = {
    enabled = false,  -- Controle de ativação da espionagem
    spyOnMyself = false,
    public = false,
    publicItalics = true
}

local ChatServices = {
    StarterGui = game:GetService("StarterGui"),
    player = Vglobais.player,
    saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest"),
    getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering"),
}

local instance = (_G.chatSpyInstance or 0) + 1
_G.chatSpyInstance = instance

local function onChatted(p, msg)
    if not p or not msg or msg == "" then return end 

    if _G.chatSpyInstance == instance then
        if p == ChatServices.player and msg:lower():sub(1, 4) == "/spy" then
            Config2.enabled = not Config2.enabled
            PrivateProperties.Text = "{SPY " .. (Config2.enabled and "EN" or "DIS") .. "ABLED}"
            ChatServices.StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
        elseif Config2.enabled and (Config2.spyOnMyself or p ~= ChatServices.player) then
            msg = msg:gsub("[\n\r]", ''):gsub("\t", ' '):gsub("[ ]+", ' ')
            local hidden = true
            local conn
            conn = ChatServices.getmsg.OnClientEvent:Connect(function(packet, channel)
                if packet.SpeakerUserId == p.UserId and packet.Message == msg:sub(#msg - #packet.Message + 1) and 
                    (channel == "All" or (channel == "Team" and Config2.public == false and Vglobais.Players[packet.FromSpeaker].Team == ChatServices.player.Team)) then
                    hidden = false
                end
            end)
            task.wait(0.1)
            conn:Disconnect()

            if hidden and Config2.enabled then
                local recipientName, messageContent = msg:match("^/w (%S+)%s+(.*)")

                if recipientName then
                    local recipientPlayer = Vglobais.Players:FindFirstChild(recipientName)
                    if recipientPlayer then
                        -- Registra o destinatário, mesmo que a espionagem não esteja ativada
                        if p.UserId ~= ChatServices.player.UserId then
                            PrivateProperties.lastRecipients[p.UserId] = recipientName
                        end
                        local recipientDisplayName = recipientPlayer.DisplayName
                        PrivateProperties.Text = "{SPY} (" .. p.DisplayName .. ") sent this: \"" .. messageContent .. "\" to (" .. recipientDisplayName .. ")"
                        ChatServices.StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
                    end
                else
                    local lastRecipient = PrivateProperties.lastRecipients[p.UserId]
                    if lastRecipient then
                        local recipientPlayer = Vglobais.Players:FindFirstChild(lastRecipient)
                        if recipientPlayer then
                            local messageContent = msg:match("^(.*)")
                            PrivateProperties.Text = "{SPY} (" .. p.DisplayName .. ") sent this: \"" .. messageContent .. "\" to (" .. recipientPlayer.DisplayName .. ")"
                            ChatServices.StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
                        end
                    else
                        PrivateProperties.Text = "{SPY} (" .. p.DisplayName .. ") sent this: \"" .. msg .. "\" to {Unknown}"
                        ChatServices.StarterGui:SetCore("ChatMakeSystemMessage", PrivateProperties)
                    end
                end
            end
        end
    end
end

for _, p in ipairs(Vglobais.Players:GetPlayers()) do
    if p and p.Chatted then 
        p.Chatted:Connect(function(msg)
            onChatted(p, msg)
        end)
    end
end

Vglobais.Players.PlayerAdded:Connect(function(p1)
    if p1 and p1.Chatted then 
        p1.Chatted:Connect(function(msg)
            onChatted(p1, msg)
        end)
    end
end)
----------------------------------------------------------------------
local AOriginal, AOriginal2, POriginal, POriginal2
local DragPart, AlignOrientation, AlignPosition

function processChildAdded(model)
    if model.Name == "GrabParts" then
        DragPart = model:FindFirstChild("DragPart")
        AlignOrientation = DragPart:FindFirstChild("AlignOrientation")
        AlignPosition = DragPart:FindFirstChild("AlignPosition")

        if DragPart and AlignOrientation and AlignPosition then
            if Toggle.masslessgrab then
                AOriginal = AlignOrientation.MaxTorque
                AOriginal2 = AlignOrientation.Responsiveness
                POriginal = AlignPosition.MaxForce
                POriginal2 = AlignPosition.Responsiveness

                AlignOrientation.MaxTorque = math.huge
                AlignOrientation.Responsiveness = 200
                AlignPosition.MaxForce = math.huge
                AlignPosition.Responsiveness = 200
            end
        end  
    end
end

function switchChildAddedState(isActive)
    if isActive then
        if not newConnection then
            newConnection = Vglobais.Workspace.ChildAdded:Connect(processChildAdded)
        end
    else
        if newConnection then
            newConnection:Disconnect()
            newConnection = nil
            
            if DragPart and AlignOrientation and AlignPosition then
                AlignOrientation.MaxTorque = AOriginal or AlignOrientation.MaxTorque
                AlignOrientation.Responsiveness = AOriginal2 or AlignOrientation.Responsiveness
                AlignPosition.MaxForce = POriginal or AlignPosition.MaxForce
                AlignPosition.Responsiveness = POriginal2 or AlignPosition.Responsiveness
            end
        end
    end
end

function setupCharacter()
    OthersV.character = Vglobais.player.Character or Vglobais.player.CharacterAdded:Wait()

    local humanoidRootPart = OthersV.character:WaitForChild("HumanoidRootPart")
    local firePlayerPart = humanoidRootPart:WaitForChild("FirePlayerPart")
    local canBurn = firePlayerPart:WaitForChild("CanBurn")

    function handleCanBurnChanged()
        if Toggle.Antifiretg and canBurn.Value then
            local AntifireTable = {
                Hole = OthersV.Map51 and OthersV.Map51:FindFirstChild("Hole"),
                PoisonBigHole = nil,
                ExtinguishPart = nil
            }

            AntifireTable.PoisonBigHole = AntifireTable.Hole and AntifireTable.Hole:FindFirstChild("PoisonBigHole")
            AntifireTable.ExtinguishPart = AntifireTable.PoisonBigHole and AntifireTable.PoisonBigHole:FindFirstChild("ExtinguishPart")

            if AntifireTable.ExtinguishPart then
                local originalSize = AntifireTable.ExtinguishPart.Size
                local originalCFrame = AntifireTable.ExtinguishPart.CFrame
                local originalTransparency = AntifireTable.ExtinguishPart.Transparency

                for _, descendant in pairs(AntifireTable.ExtinguishPart:GetDescendants()) do
                    descendant:Destroy()
                end

                AntifireTable.ExtinguishPart.Size = Vector3.new(5, 5, 5)
                AntifireTable.ExtinguishPart.Transparency = 1
                AntifireTable.ExtinguishPart.Position = OthersV.character.HumanoidRootPart.Position - Vector3.new(0, 3, 0)

                Vglobais.RunService.RenderStepped:Wait()

                AntifireTable.ExtinguishPart.Size = originalSize
                AntifireTable.ExtinguishPart.CFrame = originalCFrame
                AntifireTable.ExtinguishPart.Transparency = originalTransparency
            end
        end
    end
    canBurn:GetPropertyChangedSignal("Value"):Connect(handleCanBurnChanged)
end
setupCharacter()
Vglobais.player.CharacterAdded:Connect(setupCharacter)
----------------------------------------------------------------------
local locations2 = { 
    ["Green House"] = CFrame.new(-520.812134, -7.37385082, 69.9078217, -0.337429404, -2.63777817e-08, 0.941350818, 1.26098882e-08, 1, 3.25412479e-08, -0.941350818, 2.28507027e-08, -0.337429404),
    ["Red House"] = CFrame.new(-453.869141, -7.37385082, -140.031342, 0.322511047, 6.03401702e-08, 0.946565688, -6.97522964e-08, 1, -3.99806197e-08, -0.946565688, -5.31309396e-08, 0.322511047),
    ["Farm"] = CFrame.new(-148.77948, 59.7546234, -240.74884, 0.701087117, -9.27232904e-08, 0.713075638, 3.49749101e-08, 1, 9.56459942e-08, -0.713075638, -4.21164188e-08, 0.701087117),
    ["Blue House"] = CFrame.new(479.195953, 83.3133392, -274.814117, 0.950938761, -2.70165685e-08, -0.309379101, 3.71699791e-08, 1, 2.69242655e-08, 0.309379101, -3.71029429e-08, 0.950938761),
    ["Chinese House"] = CFrame.new(499.552246, 123.312851, -92.730896, 0.00229457533, -1.02152534e-07, -0.999997377, 1.72069736e-08, 1, -1.02113319e-07, 0.999997377, -1.69726206e-08, 0.00229457533),
    ["Purple House"] = CFrame.new(256.983032, -7.37385082, 420.039124, -0.888950348, 3.12136894e-09, -0.458003581, -3.55322272e-10, 1, 7.50481632e-09, 0.458003581, 6.83414791e-09, -0.888950348),
    ["Green House2"] = CFrame.new(-259.680664, 80.6256104, 291.477905, -0.847916007, 1.20325598e-08, 0.530130625, 1.26154482e-08, 1, -2.51960364e-09, -0.530130625, 4.55142324e-09, -0.847916007),
    ["--------------------"] = nil,
    ["Ice Mountain"] = CFrame.new(-415.797089, 230.62204, 485.993652, -0.951203406, -9.42748883e-08, 0.308564603, -8.24027566e-08, 1, 5.15065857e-08, -0.308564603, 2.35666633e-08, -0.951203406),
    ["Secret1"] = CFrame.new(123.518555, -7.37385178, 630.845032, 0.0814697519, 7.4923669e-08, 0.996675789, -1.28182638e-08, 1, -7.41257793e-08, -0.996675789, -6.73664458e-09, 0.0814697519),
    ["Secret2"] = CFrame.new(-92.2682343, 14.6014919, -312.274841, 0.258291036, 2.64963411e-08, -0.966067135, -1.99043946e-08, 1, 2.21053096e-08, 0.966067135, 1.35193785e-08, 0.258291036),
    ["Sky Island"] = CFrame.new(57.6084671, 346.170319, 348.660156, -0.0260010846, 2.62326605e-08, -0.999661922, -3.2673011e-08, 1, 2.70913532e-08, 0.999661922, 3.33663692e-08, -0.0260010846),
    ["Broken Bridge"] = CFrame.new(451.625885, 163.315277, 207.367813, -0.756038666, -2.54844643e-08, 0.654526949, -5.0771658e-09, 1, 3.30711067e-08, -0.654526949, 2.16798952e-08, -0.756038666),
    ["Spawn"] = CFrame.new(0.0753397793, -7.35040379, -0.0596240163, -0.99774915, 1.65282521e-09, -0.0670570061, 1.50213386e-09, 1, 2.29763319e-09, 0.0670570061, 2.19173302e-09, -0.99774915),
    ["Void"] = CFrame.new(Vector3.new(10000, 10000, 10000)),
    ["Void2"] = CFrame.new(Vector3.new(0, -49999, 0)),
    ["Cofre"] = CFrame.new(595.460266, 153.338593, -99.6081314, -0.0882067308, -3.03222025e-09, 0.996102214, 5.92441829e-08, 1, 8.2902698e-09, -0.996102214, 5.97445151e-08, -0.0882067308),
    ["Hide"] = CFrame.new(542.482483, -7.35040379, 11.1989021, -0.997272909, -8.61511182e-08, 0.0738017634, -9.21108736e-08, 1, -7.73499096e-08, -0.0738017634, -8.39369179e-08, -0.997272909)
}
----------------------------------------------------------------------
local locations = {
	["Green House"] = CFrame.new(-520.812134, -7.37385082, 69.9078217, -0.337429404, -2.63777817e-08, 0.941350818, 1.26098882e-08, 1, 3.25412479e-08, -0.941350818, 2.28507027e-08, -0.337429404),
	["Red House"] = CFrame.new(-453.869141, -7.37385082, -140.031342, 0.322511047, 6.03401702e-08, 0.946565688, -6.97522964e-08, 1, -3.99806197e-08, -0.946565688, -5.31309396e-08, 0.322511047),
	["Farm"] = CFrame.new(-148.77948, 59.7546234, -240.74884, 0.701087117, -9.27232904e-08, 0.713075638, 3.49749101e-08, 1, 9.56459942e-08, -0.713075638, -4.21164188e-08, 0.701087117),
	["Blue House"] = CFrame.new(479.195953, 83.3133392, -274.814117, 0.950938761, -2.70165685e-08, -0.309379101, 3.71699791e-08, 1, 2.69242655e-08, 0.309379101, -3.71029429e-08, 0.950938761),
	["Chinese House"] = CFrame.new(499.552246, 123.312851, -92.730896, 0.00229457533, -1.02152534e-07, -0.999997377, 1.72069736e-08, 1, -1.02113319e-07, 0.999997377, -1.69726206e-08, 0.00229457533),
	["Purple House"] = CFrame.new(256.983032, -7.37385082, 420.039124, -0.888950348, 3.12136894e-09, -0.458003581, -3.55322272e-10, 1, 7.50481632e-09, 0.458003581, 6.83414791e-09, -0.888950348),
	["Green House2"] = CFrame.new(-259.680664, 80.6256104, 291.477905, -0.847916007, 1.20325598e-08, 0.530130625, 1.26154482e-08, 1, -2.51960364e-09, -0.530130625, 4.55142324e-09, -0.847916007),
	["--------------------"] = nil,
	["Ice Mountain"] = CFrame.new(-415.797089, 230.62204, 485.993652, -0.951203406, -9.42748883e-08, 0.308564603, -8.24027566e-08, 1, 5.15065857e-08, -0.308564603, 2.35666633e-08, -0.951203406),
	["Secret1"] = CFrame.new(123.518555, -7.37385178, 630.845032, 0.0814697519, 7.4923669e-08, 0.996675789, -1.28182638e-08, 1, -7.41257793e-08, -0.996675789, -6.73664458e-09, 0.0814697519),
	["Secret2"] = CFrame.new(-92.2682343, 14.6014919, -312.274841, 0.258291036, 2.64963411e-08, -0.966067135, -1.99043946e-08, 1, 2.21053096e-08, 0.966067135, 1.35193785e-08, 0.258291036),
	["Sky Island"] = CFrame.new(57.6084671, 346.170319, 348.660156, -0.0260010846, 2.62326605e-08, -0.999661922, -3.2673011e-08, 1, 2.70913532e-08, 0.999661922, 3.33663692e-08, -0.0260010846),
	["Broken Bridge"] = CFrame.new(451.625885, 163.315277, 207.367813, -0.756038666, -2.54844643e-08, 0.654526949, -5.0771658e-09, 1, 3.30711067e-08, -0.654526949, 2.16798952e-08, -0.756038666),
	["Spawn"] = CFrame.new(0.0753397793, -7.35040379, -0.0596240163, -0.99774915, 1.65282521e-09, -0.0670570061, 1.50213386e-09, 1, 2.29763319e-09, 0.0670570061, 2.19173302e-09, -0.99774915)
}
----------------------------------------------------------------------
function saveOriginalColors()
    for _, obj in pairs(OthersV.Map51:GetDescendants()) do
        if obj:IsA("BasePart") and (obj.Name == "Grass" or obj.Name == "LushGrass" or obj.Name == "WasteGrass") then
            Valores.originalColors[obj] = obj.Color
            
            if not Connections.firstOriginalColor then
                Connections.firstOriginalColor = obj.Color
            end
        end
    end
end

function changePartColors(newColor)
    for _, obj in pairs(OthersV.Map51:GetDescendants()) do
        if obj:IsA("BasePart") and (obj.Name == "Grass" or obj.Name == "LushGrass" or obj.Name == "WasteGrass") then
            obj.Color = newColor
        end
    end
end

function restoreColors()
    for part, originalColor in pairs(Valores.originalColors) do
        if part and part:IsA("BasePart") then
            part.Color = originalColor
        end
    end
end

saveOriginalColors()
----------------------------------------------------------------------
function changeColor51(color)
    for _, part in pairs(objectModel:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Color = color
        end
    end
end
----------------------------------------------------------------------
function setBubbleChatColors(isActivated)
    local chatService = game:GetService("Chat")
    local bubbleChat = chatService.BubbleChat
    
    if isActivated then
        bubbleChat.BackgroundColor3 = Color3.new(0, 0, 0)
        bubbleChat.TextColor3 = Color3.new(1, 1, 1)
    else
        bubbleChat.BackgroundColor3 = Color3.new(250 / 255, 250 / 255, 250 / 255)
        bubbleChat.TextColor3 = Color3.new(57 / 255, 59 / 255, 61 / 255)
    end
end
----------------------------------------------------------------------
function setCanCollide42(state)
    for _, part in pairs(objectModel:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = state
        end
    end
end
----------------------------------------------------------------------
function removeRootAttachment(character)
    local hrp = character:WaitForChild("HumanoidRootPart")
    local torso = character:WaitForChild("Torso")
    local rootAttachment = hrp:WaitForChild("RootAttachment", 5)
    if torso and rootAttachment then
        rootAttachment:Destroy()
    end
end

function toggleRootAttachment(toggleState)
    Toggle.isRootAttachmentRemovalEnabled = toggleState
    local character = Vglobais.player.Character or Vglobais.player.CharacterAdded:Wait()
    if Toggle.isRootAttachmentRemovalEnabled then
        task.wait()
        removeRootAttachment(character)
    end
end

function calculateWaitInterval()
    local ping = game:GetService("Stats").PerformanceStats.Ping:GetValue()
    return ping > 100 and 0.4 or 0.35
end

function onCharacterAdded(character)
    if Toggle.isRootAttachmentRemovalEnabled then
        local waitInterval = calculateWaitInterval()
        task.wait(waitInterval)
        removeRootAttachment(character)
    end
end

Vglobais.player.CharacterAdded:Connect(onCharacterAdded)

function toggleAlignments(detector, isDisabled)
    local alignOrientationName = (detector.Name == "LeftDetector" and "LeftAlignOrientation") or "RightAlignOrientation"
    local weldName = (detector.Name == "LeftDetector" and "LeftWeld") or "RightWeld"
    local rgName = (detector.Name == "LeftDetector" and "RigidConstraint") or "RigidConstraint"
    local alignOrientation = detector:FindFirstChild(alignOrientationName)
    local weld = detector:FindFirstChild(weldName)
    local rg = detector:FindFirstChild(rgName)

    if alignOrientation and alignOrientation.Enabled ~= not isDisabled then
        alignOrientation.Enabled = not isDisabled
    end
    if weld and weld.Enabled ~= not isDisabled then
        weld.Enabled = not isDisabled
    end
    if rg and rg.Enabled ~= not isDisabled then
        rg.Enabled = not isDisabled
    end
end

local function handleBlobman(blobModel, hrp, rootAttachment, currentBlob)
    local leftDetector = blobModel:FindFirstChild("LeftDetector")
    local rightDetector = blobModel:FindFirstChild("RightDetector")
    local dropRemoteEvent = blobModel:FindFirstChild("BlobmanSeatAndOwnerScript")
        and blobModel:FindFirstChild("BlobmanSeatAndOwnerScript"):FindFirstChild("CreatureDrop")
    if not dropRemoteEvent then return end

    local isCurrentBlob = (blobModel == currentBlob)

    if leftDetector then toggleAlignments(leftDetector, not isCurrentBlob) end
    if rightDetector then toggleAlignments(rightDetector, not isCurrentBlob) end

    local function checkAndDrop(weld, detector)
        if weld then
            local attachment0 = weld.Attachment0
            if attachment0 == nil or attachment0.Parent == nil or attachment0 == rootAttachment or attachment0.Parent == rootAttachment then
                dropRemoteEvent:FireServer(detector, hrp)
                Vglobais.CharacterEvents.Struggle:FireServer(Vglobais.player)
            end
        end
    end

    checkAndDrop(leftDetector and leftDetector:FindFirstChild("LeftWeld"), leftDetector)
    checkAndDrop(rightDetector and rightDetector:FindFirstChild("RightWeld"), rightDetector)
end

local CreatureBlobs = {}

local function updateCreatureBlobs()
    CreatureBlobs = {}
    for _, blobModel in ipairs(Workspace:GetDescendants()) do
        if blobModel:IsA("Model") and blobModel.Name == "CreatureBlobman" then
            table.insert(CreatureBlobs, blobModel)
        end
    end
end

local function processCreatureBlobs()
    local character = Vglobais.player.Character or Vglobais.player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    local hrp = character:FindFirstChild("HumanoidRootPart")
    local rootAttachment = hrp and hrp:FindFirstChild("RootAttachment")
    if not humanoid or not hrp then return end
    local currentBlob = humanoid.SeatPart and humanoid.SeatPart.Parent

    for _, blobModel in ipairs(CreatureBlobs) do
        handleBlobman(blobModel, hrp, rootAttachment, currentBlob)
    end
end

task.spawn(function()
    while true do
        updateCreatureBlobs()
        task.wait(2) 
    end
end)

task.spawn(function()
    while true do
        processCreatureBlobs()
        task.wait(0.1) 
    end
end)
----------------------------------------------------------------------
local wTable = {
    Whitelist = Valores.whitelist or {},
    SPDropdown = nil,
    WDropdown = nil,
    AutoWhitelistEnabled = Toggle.autoWhitelistEnabled,
    RemoveAllWhitelistEnabled = Toggle.removeAllWhitelistEnabled
}

function wTable:IsWhitelisted(player)
    return table.find(self.Whitelist, player) ~= nil
end

function wTable:GetPlayerNames()
    local names = {}
    for _, player in pairs(Vglobais.Players:GetPlayers()) do
        if player ~= Vglobais.Players.LocalPlayer and not self:IsWhitelisted(player) then
            table.insert(names, player.Name .. " (" .. player.DisplayName .. ")")
        end
    end
    return names
end

function GetPlayerList()
    local playerList = {}
    for _, p in pairs(Vglobais.Players:GetPlayers()) do
        if p ~= Vglobais.player and not wTable:IsWhitelisted(p) then
            table.insert(playerList, p.Name .. " (" .. p.DisplayName .. ")")
        end
    end
    return playerList
end

function UpdateDropdown()
    if dropdown2 then  
        dropdown2:Refresh(wTable:GetPlayerNames(), true) 
    end
end

function wTable:FindPlayerByFullName(fullName)
    for _, player in pairs(Vglobais.Players:GetPlayers()) do
        if player.Name .. " (" .. player.DisplayName .. ")" == fullName then
            return player
        end
    end
    return nil
end

function wTable:UpdatePlayerDropdown()
    if self.SPDropdown then
        self.SPDropdown:Refresh(self:GetPlayerNames(), true)
    end
end

function wTable:UpdateWhitelistDropdown()
    local whitelistNames = {}
    for _, player in ipairs(self.Whitelist) do
        table.insert(whitelistNames, player.Name .. " (" .. player.DisplayName .. ")")
    end
    if self.WDropdown then
        self.WDropdown:Refresh(whitelistNames, true)
    end
end

function wTable:AddToWhitelist(player)
    if player and not self:IsWhitelisted(player) then
        table.insert(self.Whitelist, player)
        UpdateDropdown()  
        self:UpdateWhitelistDropdown()
        self:UpdatePlayerDropdown()
    end
end

function wTable:RemoveFromWhitelist(player)
    if player then
        for i = #self.Whitelist, 1, -1 do
            if self.Whitelist[i] == player then
                table.remove(self.Whitelist, i)
                break
            end
        end
        UpdateDropdown() 
        self:UpdateWhitelistDropdown()
        self:UpdatePlayerDropdown()
    end
end

function wTable:AddAllToWhitelist()
    for _, player in pairs(Vglobais.Players:GetPlayers()) do
        if player ~= Vglobais.Players.LocalPlayer then
            self:AddToWhitelist(player)
        end
    end
end

function wTable:RemoveAllFromWhitelist()
    self.Whitelist = {}
    UpdateDropdown()  
    self:UpdateWhitelistDropdown()
end

function UpdateFriendsList()
    local success, pages = pcall(function()
        return Vglobais.Players:GetFriendsAsync(Vglobais.Players.LocalPlayer.UserId)
    end)

    if success then
        local friends = pages:GetCurrentPage()
        for _, friend in ipairs(friends) do
            local player = Vglobais.Players:FindFirstChild(friend.Username)
            if player then
                wTable:AddToWhitelist(player)
            end
        end
    end
end

function AddFriendsToWhitelist()
    for _, player in pairs(Vglobais.Players:GetPlayers()) do
        local success, isFriend = pcall(function()
            return player:IsFriendsWith(Vglobais.Players.LocalPlayer.UserId)
        end)

        if success and isFriend and not wTable:IsWhitelisted(player) then
            wTable:AddToWhitelist(player)
        end
    end
end

UpdateFriendsList()
AddFriendsToWhitelist()

Vglobais.Players.PlayerAdded:Connect(function(player)
    local success, isFriend = pcall(function()
        return player:IsFriendsWith(Vglobais.Players.LocalPlayer.UserId)
    end)

    if success and isFriend then
        wTable:AddToWhitelist(player)
    end
end)

Vglobais.Players.PlayerRemoving:Connect(function(player)
    if wTable:IsWhitelisted(player) then
        wTable:RemoveFromWhitelist(player)
    end
end)

function wTable:SetAutoWhitelist(enabled)
    Toggle.autoWhitelistEnabled = enabled
    if enabled then
        wTable:AddAllToWhitelist()

        Vglobais.Players.PlayerAdded:Connect(function(player)
            if Toggle.autoWhitelistEnabled and not wTable:IsWhitelisted(player) then
                local success, isFriend = pcall(function()
                    return player:IsFriendsWith(Vglobais.Players.LocalPlayer.UserId)
                end)

                if success and isFriend then
                    wTable:AddToWhitelist(player)
                end
            end
        end)

        Vglobais.Players.PlayerRemoving:Connect(function(player)
            if wTable:IsWhitelisted(player) then
                wTable:RemoveFromWhitelist(player)
            end
            wTable:UpdatePlayerDropdown()
        end)
    end
end

function wTable:SetRemoveAllWhitelist(enabled)
    Toggle.removeAllWhitelistEnabled = enabled
    if enabled then
        wTable:RemoveAllFromWhitelist()
    end
end

AddFriendsToWhitelist()
----------------------------------------------------------------------
local LoopTable = {
    LoopList = Valores.LoopList,
    LPDropdown = nil,
    LDropdown = nil
}

function LoopTable:IsLooped(player)
    return table.find(self.LoopList, player) ~= nil
end

function LoopTable:GetPlayerNames()
    local names = {}
    for _, player in pairs(Vglobais.Players:GetPlayers()) do
        if player ~= Vglobais.Players.LocalPlayer and not self:IsLooped(player) then
            table.insert(names, player.Name .. " (" .. player.DisplayName .. ")")
        end
    end
    return names
end

function GetPlayerList()
    local playerList = {}
    for _, p in pairs(Vglobais.Players:GetPlayers()) do
        if p ~= Vglobais.player and not LoopTable:IsLooped(p) then
            table.insert(playerList, p.Name .. " (" .. p.DisplayName .. ")")
        end
    end
    return playerList
end

function UpdateDropdown()
    if LoopTable.LDropdown then
        LoopTable.LDropdown:Refresh(LoopTable:GetPlayerNames(), true)
    end
end

function LoopTable:FindPlayerByFullName(fullName)
    for _, player in pairs(Vglobais.Players:GetPlayers()) do
        if player.Name .. " (" .. player.DisplayName .. ")" == fullName then
            return player
        end
    end
    return nil
end

function LoopTable:UpdatePlayerDropdown()
    if self.LPDropdown then
        self.LPDropdown:Refresh(self:GetPlayerNames(), true)
    end
end

function LoopTable:UpdateLoopListDropdown()
    local looplistNames = {}
    for _, player in ipairs(self.LoopList) do
        table.insert(looplistNames, player.Name .. " (" .. player.DisplayName .. ")")
    end
    if self.LDropdown then
        self.LDropdown:Refresh(looplistNames, true)
    end
end

function LoopTable:AddToLoopList(player)
    if player and not self:IsLooped(player) then
        table.insert(self.LoopList, player)
        UpdateDropdown()
        self:UpdateLoopListDropdown()
        self:UpdatePlayerDropdown()
    end
end

function LoopTable:RemoveFromLoopList(player)
    if player then
        for i = #self.LoopList, 1, -1 do
            if self.LoopList[i] == player then
                table.remove(self.LoopList, i)
                break
            end
        end
        UpdateDropdown()
        self:UpdateLoopListDropdown()
        self:UpdatePlayerDropdown()
    end
end
----------------------------------------------------------------------
local protectedFolderName = Vglobais.player.Name .. "SpawnedInToys"

function isPartInModel2(part, model)
    return model and part:IsDescendantOf(model) or false
end

function isPartInMap2(part)
    local mapModel = Vglobais.Workspace:FindFirstChild("Map")
    return mapModel and isPartInModel2(part, mapModel) or false
end

function isPartInPlots2(part)
    local plotsFolder = Vglobais.Workspace:FindFirstChild("Plots")
    return plotsFolder and isPartInModel2(part, plotsFolder) or false
end

function isPartInSlots2(part)
    local SlotsModel = Vglobais.Workspace:FindFirstChild("Slots")
    return SlotsModel and isPartInModel2(part, SlotsModel) or false
end

function isPartInGrabParts2(part)
    local grabPartsInWorkspace = Vglobais.Workspace:FindFirstChild("GrabParts")
    if grabPartsInWorkspace and isPartInModel2(part, grabPartsInWorkspace) then
        return true
    end

    for _, character in pairs(Vglobais.Workspace:GetChildren()) do
        if character:IsA("Model") and character ~= Vglobais.player.Character then
            local grabPartsInCharacter = character:FindFirstChild("GrabParts")
            if grabPartsInCharacter and isPartInModel2(part, grabPartsInCharacter) then
                return true
            end
        end
    end

    return false
end

function isPartInProtectedAreas2(part)
    return isPartInMap2(part) or isPartInPlots2(part) or isPartInSlots2(part) or isPartInGrabParts2(part) or part:IsDescendantOf(Vglobais.Workspace:FindFirstChild(protectedFolderName)) or part:IsDescendantOf(Vglobais.player.Character)
end

function isPartInProtectedAreas3(part)
    return isPartInMap2(part) or isPartInPlots2(part) or isPartInSlots2(part) or isPartInGrabParts2(part) or part:IsDescendantOf(Vglobais.player.Character)
end

function moveItemOutOfMap2(item)
    if item and item:IsA("BasePart") then
        item.CFrame = CFrame.new(Vector3.new(10000, 10000, 10000))
    end
end

function findTouchAndMoveItem2()
    while Toggle.invisTouchEnabled do
        for _, part in ipairs(Vglobais.Workspace:FindPartsInRegion3(
            Region3.new(Vglobais.player.Character.HumanoidRootPart.Position - Vector3.new(29, 29, 29),
                        Vglobais.player.Character.HumanoidRootPart.Position + Vector3.new(29, 29, 29)),
            nil, math.huge)) do
            if not isPartInProtectedAreas2(part) and not wTable:IsWhitelisted(otherPlayer) then
                invs_touch(part)
                task.wait(0.03)
                moveItemOutOfMap2(part)
            end
        end
        task.wait()
    end
end
----------------------------------------------------------------------
local Vtoy3 = {
    ToyName = "FoodBanana",
    FoodBanana = nil,
    IsSpawned = false 
}

local targetPosition = Vector3.new(618.925293, -9.90358067, 95.3979645)

function spawnToy3()
    local success, error = pcall(function()
        Vglobais.ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer(Vtoy3.ToyName, Vglobais.Players.LocalPlayer.Character.HumanoidRootPart.CFrame, Vector3.new(0, 0, 0))
    end)
    if not success then
        warn("Failed to spawn toy: " .. error)
    end
end

function findBanana()
    local folderName = Vglobais.Players.LocalPlayer.Name .. "SpawnedInToys"
    local spawnedInToysFolder = Vglobais.Workspace:FindFirstChild(folderName)
    if spawnedInToysFolder then
        for _, item in pairs(spawnedInToysFolder:GetChildren()) do
            if item:IsA("Model") and item.Name == Vtoy3.ToyName then
                Vtoy3.FoodBanana = item
                return item
            end
        end
    end
    Vtoy3.FoodBanana = nil
    return nil
end

function updateBananaPosition(mode)
    local banana = findBanana()
    if banana then
        banana:SetPrimaryPartCFrame(CFrame.new(targetPosition))
        Vtoy3.IsSpawned = true
        local fireDetector = banana:FindFirstChild("FireDetector")
        
        if fireDetector and fireDetector:IsA("BasePart") then
            if mode == "allplayers" then
                for _, otherPlayer in pairs(Vglobais.Players:GetPlayers()) do
                    if otherPlayer.Name ~= Vglobais.Players.LocalPlayer.Name and otherPlayer.Character then
                        if not wTable:IsWhitelisted(otherPlayer) then
                            local targetHead = otherPlayer.Character:FindFirstChild("Head")
                            if targetHead then
                                fireDetector.CFrame = targetHead.CFrame * CFrame.new(0, -3, 0)
                                Vglobais.RunService.Heartbeat:Wait()
                            end
                        end
                    end
                end
            elseif mode == "looplistplayers" then
                if Valores.LoopList then
                    for _, player in pairs(Valores.LoopList) do
                        if player and player.Character then
                            local targetHead = player.Character:FindFirstChild("Head")
                            if targetHead then
                                fireDetector.CFrame = targetHead.CFrame * CFrame.new(0, -3, 0)
                                Vglobais.RunService.Heartbeat:Wait()
                            end
                        end
                    end
                end
            end
            fireDetector.CFrame = CFrame.new(targetPosition)
        end
    end
end

function onPlayerAdded3(newPlayer)
    if newPlayer.Name ~= Vglobais.Players.LocalPlayer.Name then
        newPlayer.CharacterAdded:Connect(function(character)
            character:WaitForChild("Head")
        end)
    end
end

Vglobais.Players.PlayerAdded:Connect(onPlayerAdded3)

for _, existingPlayer in pairs(Vglobais.Players:GetPlayers()) do
    if existingPlayer.Name ~= Vglobais.Players.LocalPlayer.Name then
        onPlayerAdded3(existingPlayer)
    end
end
----------------------------------------------------------------------
function updateEffects(part, enableLowGravity, enableBodyGyro)
    local bodyVelocity = part:FindFirstChild("LowGravityBodyVelocity")
    if enableLowGravity then
        if not bodyVelocity then
            bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Name = "LowGravityBodyVelocity"
            bodyVelocity.Parent = part
        end
        bodyVelocity.MaxForce = Vector3.new(Valores.Eixo.X, Valores.Eixo.Y, Valores.Eixo.Z)
        bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    elseif bodyVelocity then
        bodyVelocity:Destroy()
    end

    local bodyGyro = part:FindFirstChild("BodyGyroEffect")
    if enableBodyGyro and enableLowGravity then
        if not bodyGyro then
            bodyGyro = Instance.new("BodyGyro")
            bodyGyro.Name = "BodyGyroEffect"
            bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
            bodyGyro.CFrame = part.CFrame
            bodyGyro.Parent = part
        end
    elseif bodyGyro then
        bodyGyro:Destroy()
    end
end

function applyEffects()
    local grabParts = Vglobais.Workspace:FindFirstChild("GrabParts")
    if grabParts then
        for _, grabPart in ipairs(grabParts:GetChildren()) do
            if grabPart:IsA("BasePart") then
                local weld = grabPart:FindFirstChildOfClass("WeldConstraint")
                if weld and weld.Part1 then
                    local model = weld.Part1:FindFirstAncestorOfClass("Model")
                    if model then
                        for _, part in ipairs(model:GetDescendants()) do
                            if part:IsA("BasePart") and not isPartInProtectedAreas3(part) then
                                updateEffects(part, Toggle.lowGravityEnabled, Toggle.bodyGyroEnabled)
                            end
                        end
                    end
                end
            end
        end
    end
end

function ToggleLowGravity(enable)
    Toggle.lowGravityEnabled = enable
    Toggle.monitoring = enable

    if Toggle.monitoring then
        if not Connections.renderSteppedConnection5 or not Connections.renderSteppedConnection5.Connected then
            Connections.renderSteppedConnection5 = Vglobais.RunService.RenderStepped:Connect(applyEffects)
        end
    else
        if Connections.renderSteppedConnection5 then
            Connections.renderSteppedConnection5:Disconnect()
            Connections.renderSteppedConnection5 = nil
        end
        applyEffects()
    end
end
----------------------------------------------------------------------
local Config = {
    Collision = {
        Enabled = true,
        Head = nil,
        Torso = nil
    },
    renderSteppedConnection = nil
}

function updateCollisionState()
    if Config.Collision.Head then
        Config.Collision.Head.CanCollide = Config.Collision.Enabled
    end

    if Config.Collision.Torso then
        Config.Collision.Torso.CanCollide = Config.Collision.Enabled
    end
end

function toggleCollision()
    Config.Collision.Enabled = not Config.Collision.Enabled
    updateCollisionState()
end

function waitForCharacterParts(char)
    while not (char:FindFirstChild("Head") and (char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso"))) do
        task.wait(0.1)
    end
    Config.Collision.Torso = char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
    Config.Collision.Head = char:FindFirstChild("Head")
    updateCollisionState()
end

function onCharacterAdded(newChar)
    waitForCharacterParts(newChar)

    if Config.renderSteppedConnection then
        Config.renderSteppedConnection:Disconnect()
        Config.renderSteppedConnection = nil
    end

    Config.renderSteppedConnection = Vglobais.RunService.Stepped:Connect(function()
        if Config.Collision.Torso and not Config.Collision.Enabled and Config.Collision.Torso.CanCollide then
            Config.Collision.Torso.CanCollide = false
        end
    end)
end

Vglobais.player.CharacterAdded:Connect(onCharacterAdded)

if Vglobais.player.Character then
    onCharacterAdded(Vglobais.player.Character)
end
----------------------------------------------------------------------
local selectedLocation = "Void"

function moveItemToLocation(item)
    local destination = locations2[selectedLocation]
    if destination and item and item:IsA("BasePart") and not isPartInProtectedAreas3(item) then
        item.CFrame = destination
    end
end

function findTouchAndMoveItem()
    local item = findItemInFront()
    if item and not isPartInProtectedAreas3(item) then
        invs_touch6(item)
        task.wait()
        moveItemToLocation(item)
    end
end
----------------------------------------------------------------------
local crosshairsFrame = game.Players.LocalPlayer.PlayerGui.Crosshairs.CrosshairsFrame
local dotFrame = game.Players.LocalPlayer.PlayerGui.Crosshairs.Dot
local savedcolor = {}
local frames = {}

for _, frame in pairs(crosshairsFrame:GetChildren()) do
    if frame:IsA("Frame") then
        table.insert(frames, frame)
    end
end

for _, frame in pairs(dotFrame:GetChildren()) do
    if frame:IsA("Frame") then
        table.insert(frames, frame)
    end
end

for _, frame in ipairs(frames) do
    savedcolor[frame] = frame.BackgroundColor3
end

local rainbowActive = false

function updateFramesColor(color)
    for _, frame in ipairs(frames) do
        frame.BackgroundColor3 = color
    end
end

local function rainbowColor()
    local hue = 0
    while rainbowActive do
        hue = hue + 1/100
        if hue > 1 then hue = 0 end
        local color = Color3.fromHSV(hue, 1, 1)
        updateFramesColor(color)
        wait(0.1)
    end
end

local function restoreOriginalColors()
    for frame, color in pairs(savedcolor) do
        frame.BackgroundColor3 = color
    end
end
----------------------------------------------------------------------
updateConnection = nil
grabbingConnection = nil
originalCanCollide = {}

function isPartInModel(part, model)
    return part and model and part:IsDescendantOf(model)
end

function setCanCollideForCharacter(character, value)
    local head = character:FindFirstChild("Head")
    local torso = character:FindFirstChild("Torso") or character:FindFirstChild("UpperTorso") or character:FindFirstChild("LowerTorso")

    if head then
        originalCanCollide[head] = head.CanCollide
        head.CanCollide = value
    end

    if torso then
        originalCanCollide[torso] = torso.CanCollide == true
        torso.CanCollide = value
    end
end

function restoreCanCollide()
    for part, originalValue in pairs(originalCanCollide) do
        if part and part:IsA("BasePart") and part.Parent then
            part.CanCollide = originalValue
        end
    end
    originalCanCollide = {}
end

function handlePart(part)
    local humanoid = part:FindFirstAncestorOfClass("Humanoid")

    if humanoid then
        setCanCollideForCharacter(part.Parent, false)
    else
        local model = part:FindFirstAncestorOfClass("Model")
        if model then
            local head = model:FindFirstChild("Head")
            if head then
                setCanCollideForCharacter(model, false)
            else
                for _, descPart in ipairs(model:GetDescendants()) do
                    if descPart:IsA("BasePart") then
                        originalCanCollide[descPart] = descPart.CanCollide
                        descPart.CanCollide = false
                    end
                end
            end
        end
    end
end

local torsos = {}

function findTorsos()
    torsos = {}
    for _, part in ipairs(workspace:GetDescendants()) do
        if part:IsA("BasePart") and part.Name == "Torso" then
            table.insert(torsos, part)
        end
    end
end

function ensureTorsoCanCollideFalse()
    for i = #torsos, 1, -1 do
        local torso = torsos[i]
        if torso and torso.Parent then
            torso.CanCollide = false
        else
            table.remove(torsos, i)
        end
    end
end

function monitorNewTorsos()
    workspace.DescendantAdded:Connect(function(descendant)
        if descendant:IsA("BasePart") and descendant.Name == "Torso" then
            table.insert(torsos, descendant)
            descendant.CanCollide = false
        end
    end)
end

local function startGrabbingCheck()
    findTorsos()
    monitorNewTorsos()

    if grabbingConnection then
        grabbingConnection:Disconnect()
    end
    if updateConnection then
        updateConnection:Disconnect()
    end

    local existingGrabParts = workspace:FindFirstChild("GrabParts")
    if existingGrabParts then
        for _, model in ipairs(existingGrabParts:GetChildren()) do
            if model:IsA("Model") and model:FindFirstChild("GrabPart") then
                local partsData = {
                    grabPart = model:FindFirstChild("GrabPart"),
                    weldConstraint = model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint"),
                    part1 = model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint") and model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint").Part1,
                    mapModel = workspace:FindFirstChild("Map"),
                    plotsFolder = workspace:FindFirstChild("Plots")
                }

                if partsData.part1 and not isPartInModel(partsData.part1, partsData.mapModel) and not isPartInModel(partsData.part1, partsData.plotsFolder) then
                    handlePart(partsData.part1)
                end
            end
        end
    end

    while true do
        if _G.isGrabbingEnabled then
            if not grabbingConnection then
                grabbingConnection = workspace.ChildAdded:Connect(function(model)
                    if model:IsA("Model") and model:FindFirstChild("GrabPart") then
                        local partsData = {
                            grabPart = model:FindFirstChild("GrabPart"),
                            weldConstraint = model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint"),
                            part1 = model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint") and model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint").Part1,
                            mapModel = workspace:FindFirstChild("Map"),
                            plotsFolder = workspace:FindFirstChild("Plots")
                        }

                        if partsData.part1 and not isPartInModel(partsData.part1, partsData.mapModel) and not isPartInModel(partsData.part1, partsData.plotsFolder) then
                            handlePart(partsData.part1)
                        end
                    end
                end)

                updateConnection = Vglobais.RunService.Heartbeat:Connect(function()
                    ensureTorsoCanCollideFalse()
                end)
            end
        else
            if grabbingConnection then
                grabbingConnection:Disconnect()
                grabbingConnection = nil
            end

            if updateConnection then
                updateConnection:Disconnect()
                updateConnection = nil
            end
            restoreCanCollide()
        end

        task.wait(0.1)
    end
end
----------------------------------------------------------------------
local Vtoy = {
    ToyName = "Campfire",
    Campfire = nil,
    FirePlayerPart = nil
}

function spawnToy()
    local success, error = pcall(function()
        Vglobais.ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer(Vtoy.ToyName, Vglobais.Players.LocalPlayer.Character.HumanoidRootPart.CFrame, Vector3.new(0, 0, 0))
    end)
    if not success then
        warn("Failed to spawn toy: " .. error)
    end
end

function findCampfire()
    local folderName = Vglobais.Players.LocalPlayer.Name .. "SpawnedInToys"
    local spawnedInToysFolder = Vglobais.Workspace:FindFirstChild(folderName)
    if spawnedInToysFolder then
        for _, item in pairs(spawnedInToysFolder:GetChildren()) do
            if item:IsA("Model") and item.Name == Vtoy.ToyName then
                Vtoy.Campfire = item
                return item
            end
        end
    end
    Vtoy.Campfire = nil
    return nil
end

function invsTouchCampfire()
    local campfire = findCampfire()
    if campfire then
        Vtoy.FirePlayerPart = campfire:FindFirstChild("FirePlayerPart")
        if Vtoy.FirePlayerPart and Vtoy.FirePlayerPart:IsA("BasePart") then
            invs_touch(Vtoy.FirePlayerPart)
        end
    end
end

local function updateCampfirePosition()
    local campfire = findCampfire()
    if campfire then
        local firePlayerPart = campfire:FindFirstChild("FirePlayerPart")
        if firePlayerPart and firePlayerPart:IsA("BasePart") then
            for _, otherPlayer in pairs(Vglobais.Players:GetPlayers()) do
                if otherPlayer.Name ~= Vglobais.Players.LocalPlayer.Name and otherPlayer.Character and otherPlayer.Character.Parent == Vglobais.Workspace then
                    if not wTable:IsWhitelisted(otherPlayer) then
                        local targetPart = otherPlayer.Character:FindFirstChild("Left Leg") or otherPlayer.Character:FindFirstChild("Right Leg")
                        if targetPart then
                            firePlayerPart.CFrame = targetPart.CFrame * CFrame.new(0, -1, 0)
                            Vglobais.RunService.RenderStepped:Wait()
                        else
                            warn("Target part not found for player: " .. otherPlayer.Name)
                        end
                    end
                end
            end
            local targetPosition = Vector3.new(617.925293, -9.90358067, 95.3979645)
            campfire:SetPrimaryPartCFrame(CFrame.new(targetPosition))
        else
            warn("FirePlayerPart is missing or not a BasePart!")
        end
    else
        warn("Campfire not found!")
    end
end

function onPlayerAdded(newPlayer)
    if newPlayer.Name ~= Vglobais.Players.LocalPlayer.Name then
        newPlayer.CharacterAdded:Connect(function(character)
            character:WaitForChild("HumanoidRootPart")
        end)
    end
end

Vglobais.Players.PlayerAdded:Connect(onPlayerAdded)

for _, existingPlayer in pairs(Vglobais.Players:GetPlayers()) do
    if existingPlayer.Name ~= Vglobais.Players.LocalPlayer.Name then
        onPlayerAdded(existingPlayer)
        existingPlayer.CharacterAdded:Connect(function(character)
            character:WaitForChild("HumanoidRootPart")
        end)
    end
end
----------------------------------------------------------------------
local Vgrabbing = {
    Connection = nil,
    Toggle = false
}

local limbNames = {"Head", "Left Arm", "Right Arm", "Left Leg", "Right Leg"}

local function isLimb(part)
    return table.find(limbNames, part.Name) ~= nil
end

function getHumanoidFromPart(part)
    while part do
        local humanoid = part:FindFirstChildOfClass("Humanoid")
        if humanoid then return humanoid end
        part = part.Parent
    end
    return nil
end

function checkAndKillHumanoid(model)
    local grabPart = model:FindFirstChild("GrabPart")
    if grabPart then
        local weldConstraint = grabPart:FindFirstChild("WeldConstraint")
        if weldConstraint and weldConstraint.Part1 then
            local connectedPart = weldConstraint.Part1
            if isLimb(connectedPart) then
                local humanoid = getHumanoidFromPart(connectedPart)
                if humanoid then humanoid:ChangeState(15) end
            end
        end
    end
end

local function initGrabbingCheck()
    if Vgrabbing.Toggle then
        Vgrabbing.Connection = Workspace.ChildAdded:Connect(function(model)
            if model.Name == "GrabParts" then
                task.wait(0.01)
                checkAndKillHumanoid(model)
            end
        end)
    elseif Vgrabbing.Connection then
        Vgrabbing.Connection:Disconnect()
        Vgrabbing.Connection = nil
    end
end

local function toggleGrabbingCheck()
    Vgrabbing.Toggle = not Vgrabbing.Toggle
    initGrabbingCheck()
end
----------------------------------------------------------------------
local connections = {}
local monitoredParts = {}
local monitoredFolder = nil
local allFoldersControlled = false

function shouldExcludeModel(model)
    local excludeModelNames = { "CreatureBlobman", "NinjaKunai" } 

    for _, excludeName in ipairs(excludeModelNames) do
        if model.Name == excludeName and Toggle.SecurityMode then 
            return true
        end
    end
    return false
end

function setNoCollision(part)
    if part:IsA("BasePart") then
        part.CanCollide = false
    end
end

function restoreCollision(part)
    if part:IsA("BasePart") then
        part.CanCollide = true
    end
end

function updateCollisionForModels(folder, shouldDisable)
    for _, model in ipairs(folder:GetChildren()) do
        if model:IsA("Model") and not shouldExcludeModel(model) then 
            for _, part in ipairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    if shouldDisable then
                        setNoCollision(part)
                    else
                        restoreCollision(part)
                    end
                end
            end
        end
    end
end

function createBodyPosition(part)
    local bodyPosition = part:FindFirstChildOfClass("BodyPosition")
    if not bodyPosition then
        bodyPosition = Instance.new("BodyPosition")
        bodyPosition.Parent = part
    end
    bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPosition.D = 500
    bodyPosition.P = 10000000
    return bodyPosition
end

function createBodyGyro(part)
    local bodyGyro = part:FindFirstChildOfClass("BodyGyro")
    if not bodyGyro then
        bodyGyro = Instance.new("BodyGyro")
        bodyGyro.Parent = part
    end
    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
    bodyGyro.D = 500
    bodyGyro.P = 3000
    bodyGyro.CFrame = part.CFrame
    return bodyGyro
end

local function setupBodyObjects(part)
    if part.Name == "Main" or part.Name == "SoundPart" then
        createBodyPosition(part)
        createBodyGyro(part)
    end
end

local function removeBodyObjects(part)
    local bodyPosition = part:FindFirstChildOfClass("BodyPosition")
    if bodyPosition then
        bodyPosition:Destroy()
    end
    local bodyGyro = part:FindFirstChildOfClass("BodyGyro")
    if bodyGyro then
        bodyGyro:Destroy()
    end
end

local function removeBodyObjectsFromFolder(folder)
    for _, model in ipairs(folder:GetChildren()) do
        if model:IsA("Model") then
            for _, part in ipairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    removeBodyObjects(part)
                    restoreCollision(part)
                end
            end
        end
    end
end

local function followCircularPath(player, part, radius, targetSpeed, initialAngle)
    local bodyPosition = createBodyPosition(part)
    local bodyGyro = createBodyGyro(part)

    local angle = initialAngle
    local verticalOffset = 0
    local direction = 1

    local connection = Vglobais.RunService.RenderStepped:Connect(function(deltaTime)
        local center
        local radius = Valores.distanciam
        local targetSpeed = Valores.velocidadem
        local targetSpeed2 = Valores.velocidadet

        if Toggle.MainPlayerT and Connections.MainPlayer and Connections.MainPlayer.Character and Connections.MainPlayer.Character:FindFirstChild("HumanoidRootPart") then
            center = Connections.MainPlayer.Character.HumanoidRootPart.Position
        elseif Vglobais.player.Character and Vglobais.player.Character:FindFirstChild("HumanoidRootPart") then
            center = Vglobais.player.Character.HumanoidRootPart.Position
        end

        if center then
            if Connections.selectedmode == "Vertical Movement" then
                angle = angle + (targetSpeed * deltaTime)
                local offset = Vector3.new(math.cos(angle) * radius, verticalOffset, math.sin(angle) * radius)
                local targetPosition = center + offset
                bodyPosition.Position = targetPosition

                verticalOffset = verticalOffset + (targetSpeed2 * direction * deltaTime)

                verticalOffset = verticalOffset + (direction * targetSpeed2 * deltaTime)

                if verticalOffset >= Valores.altura then
                    direction = -1
                elseif verticalOffset <= -Valores.altura then
                    direction = 1
                end

                bodyGyro.CFrame = CFrame.new(center, targetPosition)
            else
                angle = angle + (targetSpeed * deltaTime)
                local offset = Vector3.new(math.cos(angle) * radius, Valores.altura, math.sin(angle) * radius)
                local targetPosition = center + offset
                bodyPosition.Position = targetPosition

                bodyGyro.CFrame = CFrame.new(center, targetPosition) * CFrame.Angles(Valores.cimaRotacao, 0, Valores.ladoRotacao)
            end
        else
            print("No center found")
        end
    end)

    table.insert(connections, connection)
end

local function getPartsToFollow(model)
    local parts = {}

    if shouldExcludeModel(model) then
        return parts 
    end

    local soundPart = model:FindFirstChild("SoundPart")
    if soundPart and soundPart:IsA("BasePart") then
        setupBodyObjects(soundPart)
        table.insert(parts, soundPart)
    end

    local mainPart = model:FindFirstChild("Main")
    if mainPart and mainPart:IsA("BasePart") then
        setupBodyObjects(mainPart)
        table.insert(parts, mainPart)
    end

    local grassPart = model:FindFirstChild("Grass")
    if grassPart and grassPart:IsA("BasePart") then
        table.insert(parts, grassPart)
    end

    return parts
end


local function calculateRequiredRadius(numObjects)
    local angleStep = (2 * math.pi) / numObjects
    local requiredRadius = Valores.modelSpacing / (2 * math.sin(angleStep / 2))
    return requiredRadius
end

local function updateModelPositions()
    local numObjects = #monitoredParts
    if numObjects > 0 then
        local angleStep = (2 * math.pi) / numObjects
        local baseRadius = (Toggle.activeForB and Valores.distanciat) or Valores.distanciam

        local requiredRadius = calculateRequiredRadius(numObjects)
        local adjustedRadius = math.max(baseRadius, requiredRadius)

        for i, part in ipairs(monitoredParts) do
            local angle = angleStep * (i - 1)
            followCircularPath(Vglobais.player, part, adjustedRadius, Valores.velocidadem, angle)
        end
    end
end

function prossesmodel()
    if Connections.selectedmode == "Additional Features" and (Toggle.activeForB or Toggle.activeForN) then
        part = findItemInFront()
        
        if part and not isPartInProtectedAreas2(part)then

            local model = part:FindFirstAncestorOfClass("Model")

            if model and not shouldExcludeModel(model) then
                if not table.find(monitoredParts, part) then
                    table.insert(monitoredParts, part)
                    invs_touch(part)
                    setNoCollision(part)
                    setupBodyObjects(part)
                    updateModelPositions()
                end
            end
        end

    elseif Connections.selectedmode == "Organize Models" then
        part = findItemInFront()
        
        if part and not isPartInProtectedAreas2(part)then
        
            local model = part:FindFirstAncestorOfClass("Model")
    
            if model and not shouldExcludeModel(model) then
                if not table.find(monitoredParts, part) then
                    table.insert(monitoredParts, part)
                    Valores.originalParents[model] = model.Parent

                    model.Parent = Vglobais.Workspace:FindFirstChild("FireHub Folder")
                    invs_touch(part)
                    setNoCollision(part)
                    setupBodyObjects(part)
                    updateModelPositions()
                end
            end
        end
    end
end

function restoreModelsFromFireHub()
    local fireHubFolder = Vglobais.Workspace:FindFirstChild("FireHub Folder")
    
    if fireHubFolder then
        for _, model in ipairs(fireHubFolder:GetChildren()) do
            if model:IsA("Model") then
                if Valores.originalParents[model] then
                    model.Parent = Valores.originalParents[model]

                    Valores.originalParents[model] = nil
                end
            end
        end
    end
end

local function toggleMovementForFolder(folderName, controlAll)
    if controlAll then
        if allFoldersControlled then
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}
            monitoredParts = {}
            
            for _, player in ipairs(Vglobais.Players:GetPlayers()) do
                if player ~= Vglobais.player then
                    local folder = Vglobais.Workspace:FindFirstChild(player.Name .. "SpawnedInToys")
                    if folder then
                        removeBodyObjectsFromFolder(folder)
                    end
                end
            end
            
            local fireHubFolder = Vglobais.Workspace:FindFirstChild("FireHub Folder")
            if fireHubFolder then
                removeBodyObjectsFromFolder(fireHubFolder)
            end
            
            allFoldersControlled = false
        else
            for _, player in ipairs(Vglobais.Players:GetPlayers()) do
                if player ~= Vglobais.player then
                    local folder = Vglobais.Workspace:FindFirstChild(player.Name .. "SpawnedInToys")
                    if folder then
                        processModelsFromFolder(folder.Name)
                    end
                end
            end
            
            local fireHubFolder = Vglobais.Workspace:FindFirstChild("FireHub Folder")
            if fireHubFolder then
                processModelsFromFolder(fireHubFolder.Name)
            end
            
            allFoldersControlled = true
        end
    else
        if monitoredFolder == folderName and Toggle.activeForN then
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}

            for _, part in ipairs(monitoredParts) do
                if part then
                    removeBodyObjects(part)
                    restoreCollision(part)
                end
            end
            monitoredParts = {}

            local folder = Vglobais.Workspace:FindFirstChild(monitoredFolder)
            if folder then
                updateCollisionForModels(folder, false)
                removeBodyObjectsFromFolder(folder)
            end
            
            monitoredFolder = nil
            Toggle.activeForN = false
        else
            monitoredFolder = folderName
            processModelsFromFolder(folderName)
        end
    end
end

local function processModelsFromFolder(folderName)
    local folder = Vglobais.Workspace:FindFirstChild(folderName)
    if folder then
        updateCollisionForModels(folder, true)
        for _, model in ipairs(folder:GetChildren()) do
            if model:IsA("Model") and not shouldExcludeModel(model) then 
                local parts = getPartsToFollow(model)
                for _, part in ipairs(parts) do
                    if not table.find(monitoredParts, part) then
                        table.insert(monitoredParts, part)
                        setNoCollision(part)
                    end
                end
            end
        end
        updateModelPositions()
    end
end

local function monitorNewModels()
    if monitoredFolder then
        local folder = Vglobais.Workspace:FindFirstChild(monitoredFolder)
        if folder then
            for _, model in ipairs(folder:GetChildren()) do
                if model:IsA("Model") and not shouldExcludeModel(model) then 
                    local parts = getPartsToFollow(model)
                    for _, part in ipairs(parts) do
                        if not table.find(monitoredParts, part) then
                            table.insert(monitoredParts, part)
                            setNoCollision(part)
                            updateModelPositions()
                        end
                    end
                end
            end
        end
    end
end

local function toggleMovementForFolder(folderName, controlAll)
    if controlAll then
        if allFoldersControlled then
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}
            monitoredParts = {}
            
            for _, player in ipairs(Vglobais.Players:GetPlayers()) do
                if player ~= Vglobais.player then
                    local folder = Vglobais.Workspace:FindFirstChild(player.Name .. "SpawnedInToys")
                    if folder then
                        removeBodyObjectsFromFolder(folder)
                    end
                end
            end
            
            local fireHubFolder = Vglobais.Workspace:FindFirstChild("FireHub Folder")
            if fireHubFolder then
                removeBodyObjectsFromFolder(fireHubFolder)
            end
            
            allFoldersControlled = false
        else
            for _, player in ipairs(Vglobais.Players:GetPlayers()) do
                if player ~= Vglobais.player then
                    local folder = Vglobais.Workspace:FindFirstChild(player.Name .. "SpawnedInToys")
                    if folder then
                        processModelsFromFolder(folder.Name)
                    end
                end
            end
            
            local fireHubFolder = Vglobais.Workspace:FindFirstChild("FireHub Folder")
            if fireHubFolder then
                processModelsFromFolder(fireHubFolder.Name)
            end
            
            allFoldersControlled = true
        end
    else
        if monitoredFolder == folderName and Toggle.activeForN then
            for _, connection in ipairs(connections) do
                connection:Disconnect()
            end
            connections = {}

            for _, part in ipairs(monitoredParts) do
                if part then
                    removeBodyObjects(part)
                    restoreCollision(part)
                end
            end
            monitoredParts = {}

            local folder = Vglobais.Workspace:FindFirstChild(monitoredFolder)
            if folder then
                updateCollisionForModels(folder, false)
                removeBodyObjectsFromFolder(folder)
            end
            
            monitoredFolder = nil
            Toggle.activeForN = false
        else
            monitoredFolder = folderName
            processModelsFromFolder(folderName)
            
            local fireHubFolder = Vglobais.Workspace:FindFirstChild("FireHub Folder")
            if fireHubFolder then
                processModelsFromFolder(fireHubFolder.Name)
            end

            Toggle.activeForN = true
            updateModelPositions()
        end
    end
end

task.spawn(function()
    while true do
        if Toggle.activeForB or Toggle.activeForN then
            monitorNewModels()
        end
        task.wait(0.5) 
    end
end)
----------------------------------------------------------------------
local connection = nil
local inputConnection = nil

local UIS = game:GetService("UserInputService")

local function updateDragAttachPosition()
    local grabParts = Vglobais.Workspace:FindFirstChild("GrabParts")
    local camera = Vglobais.Workspace.CurrentCamera

    if grabParts and grabParts:FindFirstChild("DragPart") then
        local dragAttach = grabParts.DragPart:FindFirstChild("DragAttach")
        if dragAttach then
            dragAttach.Position = camera.CFrame.Position + (camera.CFrame.LookVector * Valores.ZoomVeloc)
        end
    end
end

local function onInputChanged(inp)
    if inp.UserInputType == Enum.UserInputType.MouseWheel then
        local v1 = Vglobais.Workspace:FindFirstChild("GrabParts")
        if v1 then
            if inp.Position.Z > 0 then
                Valores.ZoomVeloc = Valores.ZoomVeloc + 3
            else
                Valores.ZoomVeloc = Valores.ZoomVeloc - 3
            end
        end
    end
end

local function startScript()
    Valores.ZoomVeloc = 0

    if Vglobais.Workspace:FindFirstChild("GrabParts") then
        while Vglobais.Workspace:FindFirstChild("GrabParts") and task.wait()  do
            Vglobais.Workspace:FindFirstChild("GrabParts").DragPart.DragAttach.Position = Workspace.CurrentCamera.CFrame.LookVector * Valores.ZoomVeloc
        end
    end

    connection = Workspace.ChildAdded:Connect(function(obj)
        if obj.Name == "GrabParts" then
            while Vglobais.Workspace:FindFirstChild("GrabParts") do
                local grabParts = Vglobais.Workspace:FindFirstChild("GrabParts")
                if grabParts and grabParts:FindFirstChild("DragPart") and grabParts.DragPart:FindFirstChild("DragAttach") then
                    grabParts.DragPart.DragAttach.Position = Workspace.CurrentCamera.CFrame.LookVector * Valores.ZoomVeloc
                end
                task.wait()
            end
        end
    end)

    if not inputConnection then
        inputConnection = UIS.InputChanged:Connect(onInputChanged)
    end
end

local function stopScript()
    if connection then
        connection:Disconnect()
        connection = nil
    end

    if inputConnection then
        inputConnection:Disconnect()
        inputConnection = nil
    end

    Valores.ZoomVeloc = 0
end

local function toggleScript2()
    Toggle.ZoomToggle = not Toggle.ZoomToggle
    if Toggle.ZoomToggle then
        startScript()
    else
        stopScript()
    end
end
----------------------------------------------------------------------
local partOwnerPreviousValues = {}

local function removePhysicsObjects(object)
    for _, child in ipairs(object:GetChildren()) do
        if child:IsA("BodyPosition") or child:IsA("BodyGyro") then
            child:Destroy()
        end
    end
end

local function addPhysicsObjects(object)
    if not object:FindFirstChildOfClass("BodyPosition") then
        local bodyPosition = Instance.new("BodyPosition", object)
        bodyPosition.D = 400
        bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        bodyPosition.P = 1e7 
        bodyPosition.Position = object.Position

        local bodyGyro = Instance.new("BodyGyro", object)
        bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
        bodyGyro.D = 400
        bodyGyro.P = 1e7
        bodyGyro.CFrame = object.CFrame
    end
end

local function findAndRemovePhysicsFromGrabParts()
    local grabParts = Vglobais.Workspace:FindFirstChild("GrabParts")
    if grabParts then
        for _, grabPart in ipairs(grabParts:GetChildren()) do
            if grabPart:IsA("BasePart") then
                local weldConstraint = grabPart:FindFirstChildOfClass("WeldConstraint")
                if weldConstraint and weldConstraint.Part1 then
                    local model = weldConstraint.Part1:FindFirstAncestorOfClass("Model")
                    if model then
                        for _, part in ipairs(model:GetDescendants()) do
                            if part:IsA("BasePart") then
                                removePhysicsObjects(part)
                            end
                            if part:IsA("Highlight") then
                                for i = #Valores.hanchor, 1, -1 do
                                    if Valores.hanchor[i] == part then
                                        table.remove(Valores.hanchor, i)
                                        break
                                    end
                                end
                                part:Destroy()
                            end
                        end
                    end
                end
            end
        end
    end
end

local function checkAndApplyInvsTouch(object) 
    local partOwnerCount, hasLocalPlayerOwner = 0, false
    local currentOwnerValue

    for _, descendant in ipairs(object:GetDescendants()) do
        if descendant:IsA("StringValue") and descendant.Name == "PartOwner" then
            partOwnerCount = partOwnerCount + 1
            currentOwnerValue = descendant.Value
            if descendant.Value == Vglobais.player.Name then
                hasLocalPlayerOwner = true
            end
        end
    end

    if partOwnerPreviousValues[object] == Vglobais.player.Name and currentOwnerValue ~= Vglobais.player.Name then
        partOwnerPreviousValues[object] = currentOwnerValue
    elseif partOwnerCount == 0 or not hasLocalPlayerOwner then
        invs_touch(object)
    end
end

local function monitorPhysicsObject(object)
    addPhysicsObjects(object)
    checkAndApplyInvsTouch(object)

    local function loop()
        while true do
            task.wait(0.1)
            
            if not (object:FindFirstChildOfClass("BodyPosition") or object:FindFirstChildOfClass("BodyGyro")) then
                break
            end

            checkAndApplyInvsTouch(object)

            if not object or not object:IsDescendantOf(workspace) then
                for i = #Valores.hanchor, 1, -1 do
                    local highlight = Valores.hanchor[i]
                    if highlight and highlight.Adornee == object then
                        highlight:Destroy()
                        table.remove(Valores.hanchor, i)
                    end
                end
                break
            end

            for i = #Valores.hanchor, 1, -1 do
                local highlight = Valores.hanchor[i]
                if highlight and not highlight:IsDescendantOf(workspace) then
                    highlight:Destroy()
                    table.remove(Valores.hanchor, i)
                end
            end

            if #Valores.hanchor > 0 then
                local highlightExists = false

                for _, highlight in ipairs(Valores.hanchor) do
                    if highlight and highlight:IsA("Highlight") then
                        highlightExists = true
                        local playerRoot = Vglobais.player.Character and Vglobais.player.Character:FindFirstChild("HumanoidRootPart")
                        local objectPosition = highlight.Adornee and highlight.Adornee.PrimaryPart.Position

                        if playerRoot and objectPosition then
                            local playerPosition = playerRoot.Position
                            local distance = (playerPosition - objectPosition).Magnitude

                            if distance > 25 then
                                highlight.OutlineColor = Color3.fromRGB(255, 255, 0)
                            else
                                highlight.OutlineColor = Color3.fromRGB(0, 255, 0)
                            end
                        end
                    end
                end

                if not highlightExists then
                    break
                end
            else
                break
            end
        end
    end

    task.spawn(loop)

    object.AncestryChanged:Connect(function(_, parent)
        if not parent then
            connection:Disconnect()
        end
    end)
end

local function findAndAddPhysicsObjects(object)
    for _, descendant in ipairs(object:GetDescendants()) do
        if descendant:IsA("StringValue") and descendant.Name == "PartOwner" and descendant.Value == Vglobais.player.Name then
            addPhysicsObjects(descendant.Parent)
            partOwnerPreviousValues[descendant.Parent] = descendant.Value
            
            local anchorhighlight = Instance.new("Highlight")
            anchorhighlight.Parent = descendant.Parent.Parent
            anchorhighlight.Adornee = descendant.Parent.Parent
            anchorhighlight.OutlineColor = Color3.fromRGB(0, 255, 0)
            anchorhighlight.FillTransparency = 1
            anchorhighlight.OutlineTransparency = 0.7

            table.insert(Valores.hanchor, anchorhighlight)

            spawn(function()
                monitorPhysicsObject(descendant.Parent)
            end)
        end
    end
end

local function removeAllPhysicsObjects()
    for _, object in ipairs(Vglobais.Workspace:GetDescendants()) do
        if object:IsA("BodyPosition") or object:IsA("BodyGyro") then
            object:Destroy()
        end
    end

    for _, highlight in ipairs(Valores.hanchor) do
        if highlight and highlight:IsDescendantOf(Vglobais.Workspace) then
            highlight:Destroy()
        end
    end
    Valores.hanchor = {}
end

Vglobais.Workspace.DescendantAdded:Connect(function(descendant)
    if descendant:IsA("Model") then
        findAndAddPhysicsObjects(descendant)
    end
end)
----------------------------------------------------------------------
local childAddedConnection2 = nil

local function handleChildAdded(model)
    if model.Name == "GrabParts" then
        local grabPart = model:FindFirstChild("GrabPart")
        local weldConstraint = grabPart and grabPart:FindFirstChild("WeldConstraint")
        local partToImpulse = weldConstraint and weldConstraint.Part1

        if partToImpulse then
            local velocityObj = Instance.new("BodyVelocity")
            velocityObj.Name = "VelocityObject"
            velocityObj.Parent = partToImpulse

            local connection
            model:GetPropertyChangedSignal("Parent"):Connect(function()
                if not model.Parent then
                    local inputType = Vglobais.UserInputService:GetLastInputType()

                    if inputType == Enum.UserInputType.MouseButton2 then
                        velocityObj.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
                        velocityObj.Velocity = Vglobais.Workspace.CurrentCamera.CFrame.LookVector * Valores.strength
                        Vglobais.Debris:AddItem(velocityObj, 4)

                        connection = Vglobais.RunService.Stepped:Connect(function()
                            velocityObj.Velocity = velocityObj.Velocity * 1.01
                        end)
                    else
                        velocityObj:Destroy()
                    end

                    if connection then
                        connection:Disconnect()
                    end
                end
            end)
        end
    end
end

local function toggleChildAddedConnection(state)
    if state then
        if not childAddedConnection2 then
            childAddedConnection2 = Vglobais.Workspace.ChildAdded:Connect(handleChildAdded)
        end
    else
        if childAddedConnection2 then
            childAddedConnection2:Disconnect()
            childAddedConnection2 = nil
        end
    end
end
----------------------------------------------------------------------
local function mdladded(model)
    if model.Name == "GrabParts" and Toggle.InvisibleGrabEnabled then
        local beamPart = model:FindFirstChild("BeamPart")
        local dragPart = model:FindFirstChild("DragPart")
        local grabPart = model:FindFirstChild("GrabPart")
        
        if beamPart and dragPart and grabPart then
            beamPart:Destroy()
            dragPart.Transparency = 1
            grabPart.Transparency = 1
            Vglobais.ReplicatedStorage:WaitForChild("GrabEvents"):WaitForChild("CreateGrabLine"):FireServer()
        end
    end
end

Vglobais.Workspace.ChildAdded:Connect(function(model)
    mdladded(model)
end)
----------------------------------------------------------------------
local function GetCharacter()
    return OthersV.character
end

local function IsPositionValid(position)
    local region = Region3.new(position - Vector3.new(2, 2, 2), position + Vector3.new(2, 2, 2))
    local parts = Vglobais.Workspace:FindPartsInRegion3(region, nil, math.huge)
    return #parts > 0
end

local function Teleport(pos)
    local Char = GetCharacter()
    if Char and Char:FindFirstChild("Humanoid") and Char.Humanoid.Health > 0 and IsPositionValid(pos) then
        Char.HumanoidRootPart.CFrame = CFrame.new(pos) + Vector3.new(0, 2, 0)
    end
end
----------------------------------------------------------------------
local function ag()
    local lastPartOwner = nil
    local BeingHeld = Vglobais.player:WaitForChild("IsHeld")
    local StruggleEvent = Vglobais.CharacterEvents:WaitForChild("Struggle")

    local function stopVelocity(character)
        for _, part in ipairs(character:GetDescendants()) do
            if part:IsA("BasePart") then
                part.Velocity = Vector3.new()  
                part.RotVelocity = Vector3.new()  
                part.AssemblyLinearVelocity = Vector3.new(0, 0, 0)  
                part.AssemblyAngularVelocity = Vector3.new(0, 0, 0)  
            end
        end
    end

    function setAnchored(character, state)
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            hrp.Anchored = state
        end
    end

    local function onDescendantAdded(descendant)
        if not Toggle.AgToggle then return end -- Verifica se o toggle está ativado

        if descendant:IsA("BasePart") and descendant.Name == "Part" and descendant.Parent == Vglobais.Workspace then
            local character = Vglobais.player.Character
            if character then
                local hrp = character:FindFirstChild("HumanoidRootPart")
                if hrp and (hrp.Position - descendant.Position).Magnitude <= 18 then
                    stopVelocity(character)
                    setAnchored(character, true)
                    task.wait(0.25)
                    setAnchored(character, false)
                end
            end
        end
    end

    Vglobais.Workspace.DescendantAdded:Connect(onDescendantAdded)

    local function Reconnect()
        local character = Vglobais.player.Character
        if not character then return end
        if not Toggle.AgToggle then return end

        local humanoid = character:FindFirstChildOfClass("Humanoid") or character:WaitForChild("Humanoid")
        local ragdolled = humanoid and humanoid:FindFirstChild("Ragdolled")

        if humanoid and ragdolled then
            local held = Vglobais.player:WaitForChild("IsHeld")
            local connections = getconnections and getconnections(held.Changed) or {}

            for _, conn in pairs(connections) do
                if conn.Function then
                    local scriptEnv = getfenv(conn.Function)
                    if scriptEnv and scriptEnv.script and scriptEnv.script == character:FindFirstChild("HumanoidStateTypeByGettingFlung") then
                        conn:Disconnect()
                    end
                end
            end

            humanoid = OthersV.character:WaitForChild("Humanoid")

            humanoid.Changed:Connect(function(property)
                if not Toggle.AgToggle then return end 
                if property == "Sit" and humanoid.Sit then
                    if humanoid.SeatPart == nil then 
                        humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
                        humanoid.Sit = false
                    end
                end
            end)
        end
    end

    local function checkAndPerformTPAG()
        if Vglobais.mode == "TP AG" then
            if not Toggle.AgToggle then return end
            local character = Vglobais.player.Character
            local head = character and character:FindFirstChild("Head")
            local partOwner = head and head:FindFirstChild("PartOwner")

            if partOwner then
                local ownerName = partOwner.Value
                local targetPlayer = game.Players:FindFirstChild(ownerName)
                if targetPlayer and targetPlayer.Character then
                    local targetHead = targetPlayer.Character:FindFirstChild("Head")
                    if targetHead then
                        invs_touch(targetHead)
                        task.wait(0.1)
                        local humanoidRootPartTarget = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if humanoidRootPartTarget then
                            humanoidRootPartTarget.CFrame = CFrame.new(Vglobais.spawnPosition)
                        end
                    end
                end
            end
        end
    end

    local function checkAndPerformKillAG()
        if Vglobais.mode == "Kill AG" then
            if not Toggle.AgToggle then return end
            local character = Vglobais.player.Character
            local head = character and character:FindFirstChild("Head")
            local partOwner = head and head:FindFirstChild("PartOwner")

            if partOwner then
                local ownerName = partOwner.Value
                local targetPlayer = game.Players:FindFirstChild(ownerName)
                if targetPlayer and targetPlayer.Character then
                    local humanoid = targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        invs_touch(targetPlayer.Character:FindFirstChild("Head"))
                        task.wait(0.1)
                        humanoid.Health = 0
                        task.wait(0.1)
                        local args = {
                            [1] = targetPlayer.Character:FindFirstChild("Head")
                        }
                        game:GetService("ReplicatedStorage"):WaitForChild("GrabEvents"):WaitForChild("DestroyGrabLine"):FireServer(unpack(args))
                    end
                end
            end
        end
    end


    local function onBeingHeldChanged()
        if BeingHeld.Value then
            if not Toggle.AgToggle then return end
            local character = OthersV.character
            stopVelocity(character)
            StruggleEvent:FireServer(Vglobais.player)
            setAnchored(character, true)
            local event
            event = Vglobais.RunService.Stepped:Connect(function()
                if BeingHeld.Value then
                    stopVelocity(character)
                    StruggleEvent:FireServer(Vglobais.player)
                    local character = OthersV.character
                    if character and character:FindFirstChild("HumanoidRootPart") then
                        if not character.HumanoidRootPart.Anchored then
                            checkAndPerformTPAG()
                            checkAndPerformKillAG()
                        end
                    end
                else
                    if Vglobais.player.Character and Vglobais.player.Character:FindFirstChild("HumanoidRootPart") and Vglobais.player.Character.HumanoidRootPart.Anchored then
                        setAnchored(character, false)
                    end
                    event:Disconnect()
                end
            end)
        end
    end

    BeingHeld.Changed:Connect(onBeingHeldChanged)
    Reconnect()
    Vglobais.player.CharacterAdded:Connect(Reconnect)
end
----------------------------------------------------------------------
local function initializeRagdollScript()
    local function getFacingDirection(character)
        return character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.CFrame.LookVector or Vector3.new(0, 0, 1)
    end
    local function isInFront(character, targetPosition)
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local facingDirection = getFacingDirection(character)
            return facingDirection:Dot((targetPosition - hrp.Position).unit) > 0
        end
        return false
    end
    local function getNearbyPlayers()
        local nearbyPlayers = {}
        local hrp = OthersV.character:FindFirstChild("HumanoidRootPart")
        if hrp then
            for _, p in pairs(Vglobais.Players:GetPlayers()) do
                if p ~= Vglobais.player and p.Character then
                    local playerHrp = p.Character:FindFirstChild("HumanoidRootPart")
                    if playerHrp and (hrp.Position - playerHrp.Position).Magnitude <= 30 then
                        if isInFront(OthersV.character, playerHrp.Position) then
                            table.insert(nearbyPlayers, p)
                        end
                    end
                end
            end
        end
        return nearbyPlayers
    end

    local function ragdoll(cframe2)
        local nearbyPlayers = getNearbyPlayers()
        if #nearbyPlayers == 0 then return end
        for _, p in pairs(nearbyPlayers) do
            local character = p.Character
            if character then
                local hrp = character:FindFirstChild("HumanoidRootPart")
                local leftArm = character:FindFirstChild("Left Arm")
                if hrp then
                    Vglobais.ReplicatedStorage:WaitForChild("GrabEvents"):WaitForChild("SetNetworkOwner"):FireServer(hrp, cframe2)
                    task.wait()
                    dgl(hrp)
                end
            end
        end
    end
    local character = OthersV.character
    local hrp = character and character:FindFirstChild("HumanoidRootPart")
    if hrp then
        ragdoll(hrp.CFrame)
    end
end
----------------------------------------------------------------------
local function setupPoisonSystem()
    local map = Workspace:FindFirstChild("Map")
    if not map then return end

    local poisonParts = {
        map:FindFirstChild("Hole"):FindFirstChild("PoisonBigHole"):FindFirstChild("PoisonHurtPart"),
        map:FindFirstChild("Hole"):FindFirstChild("PoisonSmallHole"):FindFirstChild("PoisonHurtPart")
    }
    
    local factoryIsland = map:FindFirstChild("FactoryIsland")
    if factoryIsland then
        for _, part in pairs(factoryIsland:GetDescendants()) do
            if part.Name == "PoisonHurtPart" then
                if not poisonParts[3] then
                    poisonParts[3] = part
                elseif not poisonParts[4] then
                    poisonParts[4] = part
                end
                if poisonParts[3] and poisonParts[4] then break end
            end
        end
    end

    for _, part in pairs(poisonParts) do
        if part then
            part.Size = Vector3.new(0.5, 0.5, 0.5)
            part.Position = Vector3.new(0, -110, 0)
            part.Transparency = 1
        end
    end

    local poison_part = poisonParts[1]
    if poison_part then
        poison_part.Size = Vector3.new(0, -110, 0)
        poison_part.Transparency = 1
    end

    Workspace.ChildAdded:Connect(function(model)
        if model.Name == "GrabParts" then
            local part_to_impulse = model:FindFirstChild("GrabPart"):FindFirstChild("WeldConstraint") and model.GrabPart.WeldConstraint.Part1
            if part_to_impulse and part_to_impulse.Parent:FindFirstChildOfClass("Humanoid") then
                local head = part_to_impulse.Parent:FindFirstChild("Head")
                while model.Parent and Toggle.PoisonToggle do
                    if head then
                        for _, p in pairs(poisonParts) do
                            if p then
                                p.Position = Toggle.PoisonToggle and head.Position or Vector3.new(0, -110, 0)
                            end
                        end
                    end
                    task.wait()
                end
                for _, p in pairs(poisonParts) do
                    if p then
                        p.Position = Vector3.new(0, -110, 0)
                    end
                end
            end
        end
    end)
end

local function togglePoisonSystem()
    Toggle.PoisonToggle = not Toggle.PoisonToggle
    if Toggle.PoisonToggle then
        setupPoisonSystem()
    end
end
----------------------------------------------------------------------
local function moveCharacter()
    local character = Vglobais.player.Character
    if not character or not character:FindFirstChild("Humanoid") or not character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local humanoid = character:WaitForChild("Humanoid")
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    if humanoid.SeatPart then
        return
    end

    local moveDirection = humanoid.MoveDirection
    local speed = _G.Velocidade / 15

    humanoidRootPart.CFrame = humanoidRootPart.CFrame + moveDirection * speed
end

local function startMoving2()
    if not _G.VelocidadeToggle then
        _G.VelocidadeToggle = true
        _G.moveConnection = Vglobais.RunService.RenderStepped:Connect(moveCharacter)
    end
end

local function stopMoving2()
    if _G.VelocidadeToggle then
        _G.VelocidadeToggle = false
        if _G.moveConnection then
            _G.moveConnection:Disconnect()
            _G.moveConnection = nil
        end
    end
end

local function toggleMovement()
    if _G.VelocidadeToggle then
        stopMoving2()
    else
        startMoving2()
    end
end
----------------------------------------------------------------------
local function removeGrabPartsExceptForPlayer(player)
    local function removeGrabParts(model)
        if model then
            for _, child in ipairs(model:GetDescendants()) do
                if child:IsA("Model") and child.Name == "GrabParts" then
                    child:Destroy()
                end
            end
        end
    end

    for _, otherPlayer in ipairs(Vglobais.Players:GetPlayers()) do
        if otherPlayer ~= player then
            local character = otherPlayer.Character
            if character then
                removeGrabParts(character)
            end
        end
    end
end

local function toggleScript(enable)
    local scriptObject = Vglobais.player:FindFirstChild("PlayerScripts") and Vglobais.player.PlayerScripts:FindFirstChild("CharacterAndBeamMove")
    if scriptObject then
        scriptObject.Disabled = not enable
        removeGrabPartsExceptForPlayer(Vglobais.player)
    end
end

local function updateToggle()
    local scriptObject = Vglobais.player:FindFirstChild("PlayerScripts") and Vglobais.player.PlayerScripts:FindFirstChild("CharacterAndBeamMove")
    
    if Toggle.characterAndBeamMoveEnabled then
        toggleScript(true)
    else
        if scriptObject then
            toggleScript(false)
        end
    end
end

local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    while not humanoid do
        character.ChildAdded:Wait()
        humanoid = character:FindFirstChildOfClass("Humanoid")
    end

    if Connections.character then
        Connections.character:Disconnect()
    end
    Connections.character = character

    if not Toggle.characterAndBeamMoveEnabled then
        toggleScript(false)
    end
end

local function onCharacterDied()
    toggleScript(true)
end

Vglobais.player.CharacterAdded:Connect(onCharacterAdded)
if Vglobais.player.Character then
    onCharacterAdded(OthersV.character)
end
----------------------------------------------------------------------
local highlights2 = {}
local previousPlayer2 = nil
local dropdown3

local function GetPlayerNames()
    local playerNames = {}
    for _, p in pairs(Vglobais.Players:GetPlayers()) do
        if p ~= Vglobais.player then
            local fullName = p.Name .. " (" .. p.DisplayName .. ")"
            table.insert(playerNames, fullName)
        end
    end
    return playerNames
end

local function AddHighlightToPlayer(player)
    if previousPlayer2 then
        RemoveHighlightFromPlayer(previousPlayer2)
    end
    if player and player.Character then
        local highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Parent = player.Character
        highlight.Adornee = player.Character
        highlight.FillColor = Color3.fromRGB(255, 0, 0)
        highlight.OutlineColor = Color3.fromRGB(255, 255, 255)
        highlight.OutlineTransparency = 0.5
        highlight.FillTransparency = 0.3
        highlights2[player.UserId] = highlight
    end
    previousPlayer2 = player
end

local function RemoveHighlightFromPlayer(player)
    if player and player.Character then
        local highlight = player.Character:FindFirstChild("Highlight")
        if highlight then
            highlight:Destroy()
            highlights2[player.UserId] = nil
        end
    end
end

local function TeleportToPlayer(selectedPlayerName)
    local playerToTeleportTo = nil
    for _, p in pairs(Vglobais.Players:GetPlayers()) do
        if p.Name .. " (" .. p.DisplayName .. ")" == selectedPlayerName then
            playerToTeleportTo = p
            break
        end
    end
    if playerToTeleportTo and playerToTeleportTo.Character then
        local targetHRP = playerToTeleportTo.Character:FindFirstChild("HumanoidRootPart")
        local playerHRP = Vglobais.player.Character and Vglobais.player.Character:FindFirstChild("HumanoidRootPart")
        if targetHRP and playerHRP then
            playerHRP.CFrame = targetHRP.CFrame
            RemoveHighlightFromPlayer(playerToTeleportTo)
        end
    end
end

local function UpdateDropdownOptions()
    local playerNames = GetPlayerNames()
    if dropdown3 and MainPlayerDp then
        MainPlayerDp:Refresh(playerNames, true)
        dropdown3:Refresh(playerNames, true)
    end
end

local function CombinedUpdate()
    UpdateDropdownOptions()
    wTable:UpdateWhitelistDropdown()
end 

game.Players.PlayerAdded:Connect(CombinedUpdate)
game.Players.PlayerRemoving:Connect(function(player)
    RemoveHighlightFromPlayer(player)
    CombinedUpdate()
end)
----------------------------------------------------------------------
local highlightColor = Color3.fromRGB(0, 0, 255)
local highlights = {}
local previousPlayer 

local function RemoveHighlightFromPlayer(player)
    if player and player.Character then
        local highlight = player.Character:FindFirstChild("Highlight")
        if highlight then
            highlight:Destroy()
        end
    end
end

local function AddHighlightToPlayer(player)
    if previousPlayer then
        RemoveHighlightFromPlayer(previousPlayer)
    end
    if player and player.Character then
        local highlight = Instance.new("Highlight")
        highlight.Name = "Highlight"
        highlight.Parent = player.Character
        highlight.Adornee = player.Character
        highlight.FillColor = highlightColor
        highlight.OutlineColor = Color3.fromRGB(0, 0, 255)
        highlight.OutlineTransparency = 0.9
        highlight.FillTransparency = 0.6
        highlights[player.UserId] = highlight
    end
    previousPlayer = player
end

function HandleButtonActions()
    if Connections.selectedPlayer2 then
        local player = Vglobais.Players:FindFirstChild(Connections.selectedPlayer2)
        if player then
            RemoveHighlightFromPlayer(player)
        end
    end
end

local function UpdateHighlight()
    if Connections.selectedPlayer2 then
        local player = Vglobais.Players:FindFirstChild(Connections.selectedPlayer2)
        if player then
            AddHighlightToPlayer(player)
        end
    end
end

local function ApplyBodyControls(weightPart)
    for _, child in pairs(weightPart:GetChildren()) do
        if child:IsA("BodyGyro") or child:IsA("BodyPosition") then
            child:Destroy()
        end
    end

    local bodyGyro = Instance.new("BodyGyro")
    bodyGyro.Parent = weightPart
    bodyGyro.MaxTorque = Vector3.new(math.huge, math.huge, math.huge)
    bodyGyro.CFrame = weightPart.CFrame
    bodyGyro.P = 1000

    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.Parent = weightPart
    bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPosition.D = 500
    bodyPosition.P = 1000
    bodyPosition.Position = weightPart.Position
end

function GetPlayerHumanoidRootPart(targetPlayer)
    local target = Vglobais.Players:FindFirstChild(targetPlayer)
    return target and target.Character and target.Character:FindFirstChild("HumanoidRootPart")
end

function GetPlayerHead(targetPlayer)
    local target = Vglobais.Players:FindFirstChild(targetPlayer)
    return target and target.Character and target.Character:FindFirstChild("Head")
end

local function GetCreatureBlobman()
    if Toggle.allblobs then
        local blobs = {}
    
        for _, player in ipairs(Vglobais.Players:GetPlayers()) do
            if player then
                local folder = Vglobais.Workspace:FindFirstChild(player.Name .. "SpawnedInToys")
                if folder then
                    for _, blob in ipairs(folder:GetChildren()) do
                        if blob.Name == "CreatureBlobman" then
                            table.insert(blobs, blob)
                        end
                    end
                end
            end
        end
    
        for i = 1, 5 do
            local plotFolder = Vglobais.Workspace:FindFirstChild("PlotItems"):FindFirstChild("Plot" .. i)
            if plotFolder then
                for _, blob in ipairs(plotFolder:GetChildren()) do
                    if blob.Name == "CreatureBlobman" then
                        table.insert(blobs, blob)
                    end
                end
            end
        end
    
        return blobs
    end

    if Toggle.lBlob then
        local character = Vglobais.player.Character or Vglobais.player.CharacterAdded:Wait()
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        if humanoid and humanoid.SeatPart then
            return { humanoid.SeatPart.Parent }
        end
    end

    if Toggle.DropdownEnabled and Connections.selectedPlayer4 then
        local selectedPlayer = Vglobais.Players:FindFirstChild(Connections.selectedPlayer4)
        if selectedPlayer then
            local playerFolder = Vglobais.Workspace:FindFirstChild(selectedPlayer.Name .. "SpawnedInToys")
            if playerFolder then
                local blobs = {}
                for _, blob in ipairs(playerFolder:GetChildren()) do
                    if blob.Name == "CreatureBlobman" then
                        table.insert(blobs, blob)
                    end
                end
                return blobs
            end
        end
    end

    local playerFolder = Vglobais.Workspace:FindFirstChild(Vglobais.player.Name .. "SpawnedInToys")
    if playerFolder then
        local blob = playerFolder:FindFirstChild("CreatureBlobman")
        if blob then
            return { blob }
        end
    end

    return nil
end

local function PerfectGrab(Detector, target)
    local blobs = GetCreatureBlobman()
    if not blobs or not target then return end

    local function isPlayerSeated(target)
        local character = target.Parent
        local humanoid = character and character:WaitForChild("Humanoid")
        if humanoid then
            return humanoid.Sit
        end
        return false
    end

    local function FireGrab(blobman, detectorSide)
        local weld = (detectorSide == blobman.LeftDetector) and detectorSide.LeftWeld or detectorSide.RightWeld
        blobman.BlobmanSeatAndOwnerScript.CreatureGrab:FireServer(
            detectorSide,
            target,
            Toggle.SecretBlob and detectorSide.AttachPlayer or weld
        )
    end
    

    for _, blobman in ipairs(blobs) do
        if Detector == "CreatureGrab" then
            FireGrab(blobman, blobman.LeftDetector)
            if Toggle.MaosBlobs then
                FireGrab(blobman, blobman.RightDetector)
            end

            local isNearby = IsAround(target, 30)
            task.wait(isNearby and 0 or 0.35)

            if isPlayerSeated(target) and not verify(target) then
                SetNetworkOwnerEvent:FireServer(target, target.CFrame)
            end
        elseif Detector == "CreatureDrop" then
            blobman.BlobmanSeatAndOwnerScript.CreatureDrop:FireServer(blobman.LeftDetector.LeftWeld, target)
            if Toggle.MaosBlobs then
                blobman.BlobmanSeatAndOwnerScript.CreatureDrop:FireServer(blobman.RightDetector.RightWeld, target)
            end
        end
    end
end

local function LockAndGrab()
    if Connections.selectedPlayer2 then
        local humanoidRootPart = GetPlayerHumanoidRootPart(Connections.selectedPlayer2)
        if humanoidRootPart then
            PerfectGrab("CreatureGrab", humanoidRootPart)
            Vglobais.player.Character.Humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
        end
    end
end

local function LoopDropAndGrab(targetPlayer)
    coroutine.wrap(function()
        local humanoidRootPart
        local droppedPlayers = {}

        while Toggle.BlobKick do
            local blobs = GetCreatureBlobman()
            if blobs and #blobs > 0 then
                humanoidRootPart = GetPlayerHumanoidRootPart(targetPlayer.Name)
                if humanoidRootPart then
                    if not wTable:IsWhitelisted(targetPlayer) then
                        for _, blob in pairs(blobs) do
                            PerfectGrab("CreatureGrab", humanoidRootPart)

                            if not droppedPlayers[targetPlayer] and IsAround(humanoidRootPart, 10) then
                                task.wait(0.3)
                                PerfectGrab("CreatureDrop", humanoidRootPart)
                                droppedPlayers[targetPlayer] = true
                            end

                            local humanoid = targetPlayer.Character and targetPlayer.Character:FindFirstChildOfClass("Humanoid")
                            if humanoid and humanoid.Health <= 0 then
                                droppedPlayers[targetPlayer] = nil
                            end
                        end
                    end
                end
            end
            task.wait(0.1)
        end
    end)()
end

local function HandleGrabBlobs()
    while Toggle.BlobDt do
        local blobs = GetCreatureBlobman()
        if not blobs then
            task.wait(0.1)
            continue
        end

        for humanoidRootPart, player in pairs(Valores.monitoredCharacters) do
            local humanoid = humanoidRootPart.Parent and humanoidRootPart.Parent:FindFirstChildOfClass("Humanoid")
            if not humanoid or humanoid.Health <= 0 then
                Valores.monitoredCharacters[humanoidRootPart] = nil
            end
        end

        for _, player in ipairs(Vglobais.Players:GetPlayers()) do
            if player ~= Vglobais.player and not wTable:IsWhitelisted(player) then
                local character = player.Character or player.CharacterAdded:Wait()
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.Health > 0 and humanoidRootPart then
                    Valores.monitoredCharacters[humanoidRootPart] = player
                end
            end
        end

        for humanoidRootPart, _ in pairs(Valores.monitoredCharacters) do
            if not Toggle.BlobDt then break end
            if humanoidRootPart.Parent then
                PerfectGrab("CreatureGrab", humanoidRootPart)
                task.wait(0.01)
                PerfectGrab("CreatureDrop", humanoidRootPart)
                PerfectGrab("CreatureGrab", humanoidRootPart)
                local humanoid = humanoidRootPart.Parent:FindFirstChildOfClass("Humanoid")
                if humanoid and humanoid.Health <= 0 then
                    Valores.monitoredCharacters[humanoidRootPart] = nil
                end
                task.wait(0.4)
            end
        end

        if not Toggle.BlobDt then break end
        task.wait(math.clamp(0.1 + (#blobs - 1) * 0.05, 0.1, 0.3))
    end 

    for humanoidRootPart in pairs(Valores.monitoredCharacters) do
        Valores.monitoredCharacters[humanoidRootPart] = nil
    end
end

local function MonitorNewPlayers()
    Vglobais.Players.PlayerAdded:Connect(function(player)
        if player ~= Vglobais.player and not wTable:IsWhitelisted(player) then
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                Valores.monitoredCharacters[player.Character.HumanoidRootPart] = true
            end

            player.CharacterAdded:Connect(function(character)
                task.spawn(function()
                    repeat
                        task.wait()
                    until character:FindFirstChild("HumanoidRootPart")
                    local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                    if humanoidRootPart then
                        Valores.monitoredCharacters[humanoidRootPart] = true
                    end
                end)
            end)
        end
    end)

    while Toggle.BlobDt do
        for _, player in pairs(Vglobais.Players:GetPlayers()) do
            if player ~= Vglobais.player and not wTable:IsWhitelisted(player) then
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    Valores.monitoredCharacters[player.Character.HumanoidRootPart] = true
                end
            end
        end
        task.wait(1)
    end
end


local function UpdateBodyPositionState(create)
    local blobs = GetCreatureBlobman()
    if blobs then
        for _, blobman in pairs(blobs) do
            local weightPart = blobman:FindFirstChild("Weight")
            if weightPart then
                if create then
                    ApplyBodyControls(weightPart)
                else
                    for _, control in pairs(weightPart:GetChildren()) do
                        if control:IsA("BodyGyro") or control:IsA("BodyPosition") then
                            control:Destroy()
                        end
                    end
                end
            end
        end
    end
end

local blobThings = {
    previousBlobCount = 0,
    previousBlobOwners = {},
    displayToOwnerMap = {},
    currentHighlights = {},
    selectedOwnerName = nil,
    highlightActive = false
}

local function removeCurrentHighlights()
    for _, highlight in pairs(blobThings.currentHighlights) do
        highlight:Destroy()
    end
    blobThings.currentHighlights = {}
end

local function highlightBlobs(playerName)
    removeCurrentHighlights()

    local blobFolder = Vglobais.Workspace:FindFirstChild(playerName .. "SpawnedInToys")
    if blobFolder then
        for _, blob in pairs(blobFolder:GetChildren()) do
            if blob.Name == "CreatureBlobman" then
                local highlight = Instance.new("Highlight")
                highlight.Parent = blob
                highlight.FillColor = Color3.new(93/255, 0/255, 179/255) 
                highlight.FillTransparency = 0.5
                highlight.OutlineTransparency = 0
                highlight.OutlineColor = Color3.new(0, 0, 0)
                table.insert(blobThings.currentHighlights, highlight)
            end
        end
    end
end

function updateLabelAndDropdown()
    if not ownerDropdown then return end

    local count = 0
    local blobOwners = {}
    local blobOwnersDisplay = {}

    for _, player in pairs(Vglobais.Players:GetPlayers()) do  
        local blobFolder = Vglobais.Workspace:FindFirstChild(player.Name .. "SpawnedInToys")
        if blobFolder then
            local playerBlobCount = 0

            for _, blob in pairs(blobFolder:GetChildren()) do
                if blob.Name == "CreatureBlobman" then
                    count = count + 1
                    playerBlobCount = playerBlobCount + 1
                end
            end

            if playerBlobCount > 0 then
                local ownerString = player.Name
                local ownerDisplayString = player.Name .. " (" .. player.DisplayName .. ") [Blobs: " .. playerBlobCount .. "]"

                if not table.find(blobOwners, ownerString) then
                    table.insert(blobOwners, ownerString)
                    table.insert(blobOwnersDisplay, ownerDisplayString)

                    blobThings.displayToOwnerMap[ownerDisplayString] = ownerString
                end
            end
        end
    end

    blobThings.previousBlobCount = blobThings.previousBlobCount or 0
    blobThings.previousBlobOwners = blobThings.previousBlobOwners or {}

    local blobOwnersChanged = #blobOwners ~= #blobThings.previousBlobOwners
    if not blobOwnersChanged then
        for i, owner in ipairs(blobOwners) do
            if owner ~= blobThings.previousBlobOwners[i] then
                blobOwnersChanged = true
                break
            end
        end
    end

    if count ~= blobThings.previousBlobCount or blobOwnersChanged then
        if coollabel then
            coollabel:Set("Total Blobs: " .. count)
        end

        ownerDropdown:Refresh(blobOwnersDisplay, true)

        blobThings.previousBlobCount = count
        blobThings.previousBlobOwners = blobOwners
    end
end

task.spawn(function()
    while true do
        updateLabelAndDropdown()
        task.wait(0.5)
    end
end)
----------------------------------------------------------------------
isHighlightActive = false
highlightedPlayer = nil
highlightInstance = nil

function createHighlight(player, color)
    if highlightInstance then
        highlightInstance:Destroy()
    end

    highlightInstance = Instance.new("Highlight")
    highlightInstance.Parent = player.Character
    highlightInstance.FillColor = color
    highlightInstance.OutlineColor = Color3.new(1, 1, 1)
end

function removeHighlight()
    if highlightInstance then
        highlightInstance:Destroy()
        highlightInstance = nil
    end
    highlightedPlayer = nil
end

function addPlayerToWhitelist(player)
    if player then
        if not wTable:IsWhitelisted(player) then
            wTable:AddToWhitelist(player)
            createHighlight(player, Color3.new(0, 1, 0)) 
        else
            createHighlight(player, Color3.new(1, 0, 0)) 
        end

        task.wait(1) 
        removeHighlight()
    end
end

function checkPlayerInSight()
    local unitRay = OthersV.camera:ScreenPointToRay(OthersV.mouse.X, OthersV.mouse.Y)
    local ray = Ray.new(unitRay.Origin, unitRay.Direction * 5000)
    local part, _ = Vglobais.Workspace:FindPartOnRay(ray, Vglobais.player.Character, false, true)

    if part and part.Parent then
        local player = Vglobais.Players:GetPlayerFromCharacter(part.Parent)
        if player and player ~= highlightedPlayer then
            removeHighlight()
            highlightedPlayer = player
            createHighlight(player, Color3.new(1, 1, 0)) -- Amarelo
        elseif not player then
            removeHighlight()
        end
    else
        removeHighlight()
    end
end

function toggleHighlight()
    isHighlightActive = not isHighlightActive

    if isHighlightActive then
        task.spawn(function()
            while isHighlightActive do
                checkPlayerInSight()
                task.wait(0.1)
            end
        end)
    else
        if highlightedPlayer then
            addPlayerToWhitelist(highlightedPlayer)
        end
        removeHighlight()
    end
end

function onJumpRequest()
    local humanoid = OthersV.character:FindFirstChildOfClass("Humanoid")
    if _G.InfiniteJump and humanoid and humanoid:GetState() == Enum.HumanoidStateType.Freefall then
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end

Vglobais.UserInputService.JumpRequest:Connect(onJumpRequest)
----------------------------------------------------------------------
function createInvisibleBoxForPlayer(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local box = Instance.new("Part")
        box.Size = Vector3.new(4, 7, 4)
        box.Position = player.Character.HumanoidRootPart.Position
        box.Anchored = true
        box.CanCollide = false
        box.CanQuery = false
        box.Transparency = 1
        box.Parent = player.Character
        box.Name = "BringBox"

        game:GetService("RunService").Heartbeat:Connect(function()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                box.Position = player.Character.HumanoidRootPart.Position
            end
        end)
    end
end

function setCanQueryForAllBringBoxes(Value)
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player.Character then
            local box = player.Character:FindFirstChild("BringBox")
            if box then
                box.CanQuery = Value  
            end
        end
    end
end

function ensureBringBoxes()
    for _, player in ipairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer and player.Character then
            if not player.Character:FindFirstChild("BringBox") then
                createInvisibleBoxForPlayer(player)
            end
        end
    end
end

game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        createInvisibleBoxForPlayer(player)
    end)
end)

ensureBringBoxes()

task.spawn(function()
    while true do
        task.wait(2)
        ensureBringBoxes()
    end
end)

function bring()
    local part = findItemInFront("mode2")
    if part and not isPartInProtectedAreas3(part) then
        local character = part.Parent
        if part.Name == "BringBox" then
            local playerName = part.Parent.Name
            local player = game.Players:FindFirstChild(playerName)
            if player and player.Character then
                character = player.Character
            end
        end

        if character and character:FindFirstChild("Humanoid") then
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            if humanoidRootPart then
                invs_touch6(humanoidRootPart)
                task.wait(0.1)
                character:SetPrimaryPartCFrame(Vglobais.player.Character.HumanoidRootPart.CFrame + Vglobais.player.Character.HumanoidRootPart.CFrame.LookVector * 8)
                task.wait(0.2)
                dgl(humanoidRootPart)
            end
        else
            invs_touch6(part)
            task.wait(0.1)
            part.CFrame = Vglobais.player.Character.HumanoidRootPart.CFrame + Vglobais.player.Character.HumanoidRootPart.CFrame.LookVector * 8
            task.wait(0.2)
            dgl(part)
        end
    end
    setCanQueryForAllBringBoxes(false)
end
----------------------------------------------------------------------
local playersInArea = {}

local function IsInRegion(part, region)
    local regionMin = region.CFrame.Position - region.Size / 2
    local regionMax = region.CFrame.Position + region.Size / 2
    local partPosition = part.Position

    return partPosition.X >= regionMin.X and partPosition.X <= regionMax.X and
           partPosition.Y >= regionMin.Y and partPosition.Y <= regionMax.Y and
           partPosition.Z >= regionMin.Z and partPosition.Z <= regionMax.Z
end
local function kill4(part)
    if part:IsA("BasePart") and part.Name == "Head" then
        local playerCharacter = part.Parent
        local humanoid = playerCharacter:FindFirstChildOfClass("Humanoid")

        invs_touch(part)

        task.wait()

        if humanoid and humanoid.Health > 0 then
            humanoid.Health = -1
        end

        task.wait()

        dgl(part)
    end
end

local function killaura()
    local playerPosition = Vglobais.player.Character.HumanoidRootPart.Position
    local regionSize = Vector3.new(60, 60, 60)  -- Tamanho da região
    local regionStart = playerPosition - regionSize / 2
    local regionEnd = playerPosition + regionSize / 2

    local region = Region3.new(regionStart, regionEnd)
    local partsInRegion = Vglobais.Workspace:FindPartsInRegion3(region, nil, math.huge)
    
    local currentPlayersInArea = {}
    for _, part in pairs(partsInRegion) do
        if part:IsA("BasePart") and part.Parent and part.Parent:FindFirstChild("Humanoid") then
            local player = part.Parent
            if player and player ~= Vglobais.player and player:FindFirstChild("Head") then
                local head = player.Head
                if IsInRegion(head, region) then
                    currentPlayersInArea[player.Name] = true
                    if not playersInArea[player.Name] and player.Humanoid.Health > 0 then
                        kill4(head)
                    end
                end
            end
        end
    end

    -- Atualiza a lista de jogadores na área
    for playerName in pairs(playersInArea) do
        if not currentPlayersInArea[playerName] then
            playersInArea[playerName] = nil
        end
    end

    playersInArea = currentPlayersInArea
end

local function KillToggle(value)
    if value then
        while Toggle.Killaura2 do
            killaura()  -- Chama a função killaura
            task.wait(0.1)  -- Intervalo entre as verificações
        end
    end
end
----------------------------------------------------------------------
function spawnrocket()
    local hrp = Vglobais.player.Character:FindFirstChild("HumanoidRootPart")
    if hrp then
        local cf = hrp.CFrame
        local spawnCFrame = cf * CFrame.new(5, 9, 25)
        Vglobais.ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer("BombMissile", spawnCFrame, Vector3.new(0, 0, 0))
    end
end

function GoRocket()
    spawnrocket()
    local bombMissile = OthersV.inv.BombMissile
    if bombMissile then
        local camera = Vglobais.Workspace.CurrentCamera
        local mouse = Vglobais.player:GetMouse()
        local mousePosition = mouse.Hit.p

        local args = {
            [1] = {
                ["Hitbox"] = bombMissile.PartHitDetector,
                ["PositionPart"] = bombMissile.Body
            },
            [2] = mousePosition
        }

        game:GetService("ReplicatedStorage").BombEvents.BombExplode:FireServer(unpack(args))
    end
end
----------------------------------------------------------------------
local vflytable = {
    CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}, 
    lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0},
    SPEED = Valores.FlySpeed,  
    FLYING = false,
    BG = nil, 
    BV = nil  
}

local function ativarVoo()
    local T = OthersV.character:WaitForChild("HumanoidRootPart")
    local Humanoid = OthersV.character:WaitForChild("Humanoid")

    vflytable.FLYING = true
    vflytable.BG = Instance.new('BodyGyro')
    vflytable.BV = Instance.new('BodyVelocity')
    vflytable.BG.P = 9e4
    vflytable.BG.Parent = T
    vflytable.BV.Parent = T
    vflytable.BG.maxTorque = Vector3.new(9e9, 9e9, 9e9)
    vflytable.BG.cframe = T.CFrame
    vflytable.BV.velocity = Vector3.new(0, 0, 0)
    vflytable.BV.maxForce = Vector3.new(9e9, 9e9, 9e9)
    task.spawn(function()
        repeat wait()
            if vflytable.CONTROL.L + vflytable.CONTROL.R ~= 0 or vflytable.CONTROL.F + vflytable.CONTROL.B ~= 0 or vflytable.CONTROL.Q + vflytable.CONTROL.E ~= 0 then
                vflytable.SPEED = 50
            elseif vflytable.CONTROL.L + vflytable.CONTROL.R == 0 and vflytable.CONTROL.F + vflytable.CONTROL.B == 0 and vflytable.CONTROL.Q + vflytable.CONTROL.E == 0 then
                vflytable.SPEED = 0
            end

            if (vflytable.CONTROL.L + vflytable.CONTROL.R) ~= 0 or (vflytable.CONTROL.F + vflytable.CONTROL.B) ~= 0 or (vflytable.CONTROL.Q + vflytable.CONTROL.E) ~= 0 then
                vflytable.BV.velocity = ((Vglobais.Workspace.CurrentCamera.CoordinateFrame.lookVector * (vflytable.CONTROL.F + vflytable.CONTROL.B)) + 
                    ((Vglobais.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(vflytable.CONTROL.L + vflytable.CONTROL.R, (vflytable.CONTROL.F + vflytable.CONTROL.B + vflytable.CONTROL.Q + vflytable.CONTROL.E) * 0.2, 0).p) - 
                    Vglobais.Workspace.CurrentCamera.CoordinateFrame.p)) * vflytable.SPEED
                vflytable.lCONTROL = {F = vflytable.CONTROL.F, B = vflytable.CONTROL.B, L = vflytable.CONTROL.L, R = vflytable.CONTROL.R}
            else
                vflytable.BV.velocity = Vector3.new(0, 0, 0)
            end
            vflytable.BG.cframe = Vglobais.Workspace.CurrentCamera.CoordinateFrame
        until not vflytable.FLYING
        vflytable.CONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        vflytable.lCONTROL = {F = 0, B = 0, L = 0, R = 0, Q = 0, E = 0}
        vflytable.SPEED = 0
        vflytable.BG:Destroy()
        vflytable.BV:Destroy()
        if Humanoid then
            Humanoid.PlatformStand = false
        end
    end)
end

-- Função para parar o voo
local function pararVoo()
    vflytable.FLYING = false
end

-- Função de toggle (alternar entre ativar e desativar voo)
local function toggleFly()
    if vflytable.FLYING then
        pararVoo()
    else
        ativarVoo()
    end
end

local function onInputBegan(input, gameProcessed)
    if gameProcessed then return end

    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.W then
            vflytable.CONTROL.F = 1  
        elseif input.KeyCode == Enum.KeyCode.S then
            vflytable.CONTROL.B = -1 
        elseif input.KeyCode == Enum.KeyCode.A then
            vflytable.CONTROL.L = -1 
        elseif input.KeyCode == Enum.KeyCode.D then
            vflytable.CONTROL.R = 1  
        elseif input.KeyCode == Enum.KeyCode.Q then
            vflytable.CONTROL.Q = 1  
        elseif input.KeyCode == Enum.KeyCode.E then
            vflytable.CONTROL.E = -1 
        end
    end
end

local function onInputEnded(input)
    if input.UserInputType == Enum.UserInputType.Keyboard then
        if input.KeyCode == Enum.KeyCode.W then
            vflytable.CONTROL.F = 0
        elseif input.KeyCode == Enum.KeyCode.S then
            vflytable.CONTROL.B = 0
        elseif input.KeyCode == Enum.KeyCode.A then
            vflytable.CONTROL.L = 0
        elseif input.KeyCode == Enum.KeyCode.D then
            vflytable.CONTROL.R = 0
        elseif input.KeyCode == Enum.KeyCode.Q then
            vflytable.CONTROL.Q = 0
        elseif input.KeyCode == Enum.KeyCode.E then
            vflytable.CONTROL.E = 0
        end
    end
end

Vglobais.UserInputService.InputBegan:Connect(onInputBegan)
Vglobais.UserInputService.InputEnded:Connect(onInputEnded)
----------------------------------------------------------------------
function createBodyPosition(part)
    local existingBodyPosition = part:FindFirstChildOfClass("BodyPosition")
    if existingBodyPosition then
        return existingBodyPosition
    end
    
    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.Parent = part
    bodyPosition.D = 500
    bodyPosition.P = 1e7 
    bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPosition.Position = part.Position + Vector3.new(0, 70, 0)
    
    return bodyPosition
end

function BlobAura()
    local character = Vglobais.player.Character or Vglobais.player.CharacterAdded:Wait()
    local humanoid = character:WaitForChild("Humanoid")
    local hrp = character:WaitForChild("HumanoidRootPart")

    while Toggle.BlobAura do
        if humanoid.SeatPart then
            for _, player in ipairs(Vglobais.Players:GetPlayers()) do
                if player.Character and player ~= Vglobais.player then
                    local targetCharacter = player.Character
                    local targetHrp = targetCharacter:FindFirstChild("HumanoidRootPart")
                    local fpp = targetHrp and targetHrp:FindFirstChild("FirePlayerPart")

                    if IsAround(targetHrp, 28) then
                        if fpp and not fpp.Anchored then
                            SetNetworkOwnerEvent:FireServer(targetHrp, OthersV.camera.CFrame)

                            while not verify(targetHrp) and Toggle.BlobAura do
                                task.wait(0.01)
                            end

                            if Toggle.BlobAura then
                                createBodyPosition(targetHrp)
                                task.wait(0.3)
                                fpp.Anchored = true
                                dgl(targetHrp)
                                PerfectGrab("CreatureGrab", targetHrp)
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.01)
    end

    for _, player in ipairs(Vglobais.Players:GetPlayers()) do
        if player.Character and player ~= Vglobais.player then
            local targetHrp = player.Character:FindFirstChild("HumanoidRootPart")
            local fpp = targetHrp and targetHrp:FindFirstChild("FirePlayerPart")
            if targetHrp then
                for _, child in ipairs(targetHrp:GetChildren()) do
                    if child:IsA("BodyPosition") then
                        child:Destroy()
                    end
                end
                if fpp then
                    fpp.Anchored = false
                end
            end
        end
    end
end

----------------------------------------------------------------------
function BSpeed()
    local humanoid = OthersV.character:WaitForChild("Humanoid")
    local seatPart = humanoid.SeatPart
    
    -- Verifica se seatPart é válido
    if seatPart and seatPart.Parent and seatPart.Parent:IsA("Model") and seatPart.Parent.Name == "CreatureBlobman" then
        local blob = seatPart.Parent
        local bh = blob:WaitForChild("HumanoidCreature", 3)  -- Timeout de 3 segundos, ajuste conforme necessário

        if bh then
            bh.WalkSpeed = Valores.BlobSpeed
        else
            warn("HumanoidCreature não encontrado no Blob")
        end
    end
end
----------------------------------------------------------------------
local owners = {
    {Name = "Anti_cheatbfbp", UserId = 6168002069},
    {Name = "OutroOwner", UserId = 1234567890}
}

local localPlayer = Vglobais.player

-- Função para verificar se um jogador é dono
local function isOwner(player)
    for _, owner in ipairs(owners) do
        if player.Name == owner.Name or player.UserId == owner.UserId then
            return true
        end
    end
    return false
end

local function findPlayerByNickname(nickname)
    for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
        if player.Name:lower():find(nickname:lower()) then
            return player
        end
    end
    return nil
end

local function processCommand(owner, message)
    local args = message:split(" ")
    local command = args[1]
    local action = args[2]
    local targetNickname = args[3]

    if command == "/fhub" and targetNickname then
        local targetPlayer = findPlayerByNickname(targetNickname)
        if not targetPlayer then
            owner:SendNotification({
                Title = "Erro",
                Text = "Jogador não encontrado.",
                Duration = 3
            })
            return
        end

        if isOwner(targetPlayer) then
            owner:SendNotification({
                Title = "Erro",
                Text = "Você não pode interagir com outro Owner.",
                Duration = 3
            })
            return
        end

        if action == "bring" then
            local character = targetPlayer.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                if humanoidRootPart and owner.Character then
                    local ownerHumanoidRootPart = owner.Character:FindFirstChild("HumanoidRootPart")
                    if ownerHumanoidRootPart then
                        humanoidRootPart.CFrame = ownerHumanoidRootPart.CFrame * CFrame.new(0, 5, 0)
                    end
                end
            end

        elseif action == "kick" then
            targetPlayer:Kick("Você foi expulso pelo Owner.")

        elseif action == "kill" then
            local character = targetPlayer.Character
            if character then
                local humanoid = character:FindFirstChild("Humanoid")
                if humanoid then
                    humanoid.Health = 0
                end
            end

        else
            owner:SendNotification({
                Title = "Erro",
                Text = "Ação desconhecida.",
                Duration = 3
            })
        end
    end
end

local function monitorOwner(owner)
    owner.Chatted:Connect(function(message)
        processCommand(owner, message)
    end)
end

for _, player in ipairs(game:GetService("Players"):GetPlayers()) do
    if isOwner(player) and player ~= localPlayer then
        monitorOwner(player)
    end
end

game:GetService("Players").PlayerAdded:Connect(function(player)
    if isOwner(player) and player ~= localPlayer then
        monitorOwner(player)
    end
end)

if isOwner(localPlayer) then
    localPlayer.Chatted:Connect(function(message)
        processCommand(localPlayer, message)
    end)
end
----------------------------------------------------------------------
local Hnames = {
    "Plot1",
    "Plot2",
    "Plot3",
    "Plot4",
    "Plot5"
}

-- Tabela de posições para cada Plot, agora usando CFrame diretamente
local plotPositions = {
    Plot1 = CFrame.new(-540.484253, -7.35040379, 76.3234024, -0.338732988, -7.1755295e-09, 0.940882564, -7.29554817e-09, 1, 4.9998663e-09, -0.940882564, -5.17063414e-09, -0.338732988),
    Plot2 = CFrame.new(-487.901703, -7.35040379, -150.925827, 0.346610278, -1.09268097e-08, 0.938009202, 3.99726545e-08, 1, -3.12163628e-09, -0.938009202, 3.85767081e-08, 0.346610278),
    Plot3 = CFrame.new(271.063232, -7.35040379, 445.417145, -0.903925478, -2.04566284e-08, -0.427689999, 1.47849843e-09, 1, -5.09553217e-08, 0.427689999, -4.66921541e-08, -0.903925478),
    Plot4 = CFrame.new(496.006989, 83.336792, -351.081573, 0.433340222, 5.73819037e-08, -0.901230395, 6.69387035e-08, 1, 9.58568762e-08, 0.901230395, -1.01865837e-07, 0.433340222),
    Plot5 = CFrame.new(541.627319, 123.338615, -92.3261032, 0.0397977382, -5.4065552e-08, -0.999207735, -7.35724512e-08, 1, -5.70387577e-08, 0.999207735, 7.57841718e-08, 0.0397977382)
}

local Plots = workspace:FindFirstChild("Plots") -- Folder

local PlotOwners
local PlotPeople
local PlotPeopleList

function HouseFunction()
    task.spawn(function()
        while true do
            if Valores.HouseValue == "Witch House" then
                local house = Plots:FindFirstChild("Plot3")
                local ps = house:FindFirstChild("PlotSign")
                if ps then
                    local fr = ps:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        local VlList = {}
                        for _, child in pairs(fr:GetChildren()) do
                            if child:IsA("StringValue") then
                                table.insert(VlList, child)
                            end
                        end
                        if #VlList > 0 then
                            local ownerPlayer = game.Players:FindFirstChild(VlList[1].Value)
                            local ownerName = ownerPlayer and ownerPlayer.Name or "Unknown"
                            PlotOwners:Set("Plot Owner: " .. ownerName, nil, "Left")
                            PlotPeople:Set("People in Plot: " .. #VlList, nil, "Left")
                        else
                            PlotOwners:Set("Plot Available!", nil, "Left")
                            PlotPeople:Set("People in Plot: 0", nil, "Left")
                        end
                    end
                end
            elseif Valores.HouseValue == "Lumber House" then
                local house = Plots:FindFirstChild("Plot2")
                local ps = house:FindFirstChild("PlotSign")
                if ps then
                    local fr = ps:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        local VlList = {}
                        for _, child in pairs(fr:GetChildren()) do
                            if child:IsA("StringValue") then
                                table.insert(VlList, child)
                            end
                        end
                        if #VlList > 0 then
                            local ownerPlayer = game.Players:FindFirstChild(VlList[1].Value)
                            local ownerName = ownerPlayer and ownerPlayer.Name or "Unknown"
                            PlotOwners:Set("Plot Owner: " .. ownerName, nil, "Left")
                            PlotPeople:Set("People in Plot: " .. #VlList, nil, "Left")
                        else
                            PlotOwners:Set("Plot Available!", nil, "Left")
                            PlotPeople:Set("People in Plot: 0", nil, "Left")
                        end
                    end
                end
            elseif Valores.HouseValue == "Common House" then
                local house = Plots:FindFirstChild("Plot1")
                local ps = house:FindFirstChild("PlotSign")
                if ps then
                    local fr = ps:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        local VlList = {}
                        for _, child in pairs(fr:GetChildren()) do
                            if child:IsA("StringValue") then
                                table.insert(VlList, child)
                            end
                        end
                        if #VlList > 0 then
                            local ownerPlayer = game.Players:FindFirstChild(VlList[1].Value)
                            local ownerName = ownerPlayer and ownerPlayer.Name or "Unknown"
                            PlotOwners:Set("Plot Owner: " .. ownerName, nil, "Left")
                            PlotPeople:Set("People in Plot: " .. #VlList, nil, "Left")
                        else
                            PlotOwners:Set("Plot Available!", nil, "Left")
                            PlotPeople:Set("People in Plot: 0", nil, "Left")
                        end
                    end
                end
            elseif Valores.HouseValue == "American House" then
                local house = Plots:FindFirstChild("Plot4")
                local ps = house:FindFirstChild("PlotSign")
                if ps then
                    local fr = ps:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        local VlList = {}
                        for _, child in pairs(fr:GetChildren()) do
                            if child:IsA("StringValue") then
                                table.insert(VlList, child)
                            end
                        end
                        if #VlList > 0 then
                            local ownerPlayer = game.Players:FindFirstChild(VlList[1].Value)
                            local ownerName = ownerPlayer and ownerPlayer.Name or "Unknown"
                            PlotOwners:Set("Plot Owner: " .. ownerName, nil, "Left")
                            PlotPeople:Set("People in Plot: " .. #VlList, nil, "Left")
                        else
                            PlotOwners:Set("Plot Available!", nil, "Left")
                            PlotPeople:Set("People in Plot: 0", nil, "Left")
                        end
                    end
                end
            elseif Valores.HouseValue == "Chinese House" then
                local house = Plots:FindFirstChild("Plot5")
                local ps = house:FindFirstChild("PlotSign")
                if ps then
                    local fr = ps:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        local VlList = {}
                        for _, child in pairs(fr:GetChildren()) do
                            if child:IsA("StringValue") then
                                table.insert(VlList, child)
                            end
                        end
                        if #VlList > 0 then
                            local ownerPlayer = game.Players:FindFirstChild(VlList[1].Value)
                            local ownerName = ownerPlayer and ownerPlayer.Name or "Unknown"
                            PlotOwners:Set("Plot Owner: " .. ownerName, nil, "Left")
                            PlotPeople:Set("People in Plot: " .. #VlList, nil, "Left")
                        else
                            PlotOwners:Set("Plot Available!", nil, "Left")
                            PlotPeople:Set("People in Plot: 0", nil, "Left")
                        end
                    end
                end
            end
            task.wait(0.5)
        end
    end)
end

function atualizarlist()
    task.spawn(function()
        while true do
            -- Inicializa variáveis necessárias para a execução
            local plotContent = ""
            local houseName = Valores.HouseValue
            local plot = nil
            local VlList = {}

            -- Define o plot com base na casa selecionada
            if houseName == "Witch House" then
                plot = Plots:FindFirstChild("Plot3")
            elseif houseName == "Lumber House" then
                plot = Plots:FindFirstChild("Plot2")
            elseif houseName == "Common House" then
                plot = Plots:FindFirstChild("Plot1")
            elseif houseName == "American House" then
                plot = Plots:FindFirstChild("Plot4")
            elseif houseName == "Chinese House" then
                plot = Plots:FindFirstChild("Plot5")
            end

            -- Verifica se o plot existe
            if plot then
                local plotSign = plot:FindFirstChild("PlotSign")
                if plotSign then
                    local fr = plotSign:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        -- Preenche a lista de jogadores do plot
                        for _, child in pairs(fr:GetChildren()) do
                            if child:IsA("StringValue") then
                                table.insert(VlList, child)
                            end
                        end

                        -- Atualiza informações na interface
                        if #VlList > 0 then
                            local playerNames = ""
                            for _, value in ipairs(VlList) do
                                local player = game.Players:FindFirstChild(value.Value)
                                if player then
                                    playerNames = playerNames .. player.Name .. " (" .. player.DisplayName .. ")\n"
                                end
                            end
                            PlotOwners:Set("Plot Owner: " .. VlList[1].Value, nil, "Left")
                            PlotPeople:Set("People in Plot: " .. #VlList, nil, "Left")
                            PlotPeopleList:Set("Names", playerNames, "Center")
                        else
                            PlotOwners:Set("Plot Available!", nil, "Left")
                            PlotPeople:Set("People in Plot: 0", nil, "Left")
                            PlotPeopleList:Set("Names", "Dont Have Players", "Center")
                        end
                    end
                end
            end

            -- Aguarda 0.5 segundos antes da próxima verificação
            task.wait(1)
        end
    end)
end

function ClaimPlot()
    if Valores.HouseValue == "Witch House" then
        local house = Plots:FindFirstChild("Plot3")
        local ps = house:FindFirstChild("PlotSign")
        local sg = ps:FindFirstChild("Sign")
        local Plus = sg:FindFirstChild("Plus")
        if Plus then
            local PlusGrabPart = Plus:FindFirstChild("PlusGrabPart")
            if PlusGrabPart and PlusGrabPart.Color == Color3.fromRGB(31, 128, 29) then
                invs_touch6(PlusGrabPart)
            end
        end

    elseif Valores.HouseValue == "Lumber House" then
        local house = Plots:FindFirstChild("Plot2")
        local ps = house:FindFirstChild("PlotSign")
        local sg = ps:FindFirstChild("Sign")
        local Plus = sg:FindFirstChild("Plus")
        if Plus then
            local PlusGrabPart = Plus:FindFirstChild("PlusGrabPart")
            if PlusGrabPart and PlusGrabPart.Color == Color3.fromRGB(31, 128, 29) then
                invs_touch6(PlusGrabPart)
            end
        end

    elseif Valores.HouseValue == "Common House" then
        local house = Plots:FindFirstChild("Plot1")
        local ps = house:FindFirstChild("PlotSign")
        local sg = ps:FindFirstChild("Sign")
        local Plus = sg:FindFirstChild("Plus")
        if Plus then
            local PlusGrabPart = Plus:FindFirstChild("PlusGrabPart")
            if PlusGrabPart and PlusGrabPart.Color == Color3.fromRGB(31, 128, 29) then
                invs_touch6(PlusGrabPart)
            end
        end

    elseif Valores.HouseValue == "American House" then
        local house = Plots:FindFirstChild("Plot4")
        local ps = house:FindFirstChild("PlotSign")
        local sg = ps:FindFirstChild("Sign")
        local Plus = sg:FindFirstChild("Plus")
        if Plus then
            local PlusGrabPart = Plus:FindFirstChild("PlusGrabPart")
            if PlusGrabPart and PlusGrabPart.Color == Color3.fromRGB(31, 128, 29) then
                invs_touch6(PlusGrabPart)
            end
        end

    elseif Valores.HouseValue == "Chinese House" then
        local house = Plots:FindFirstChild("Plot5")
        local ps = house:FindFirstChild("PlotSign")
        local sg = ps:FindFirstChild("Sign")
        local Plus = sg:FindFirstChild("Plus")
        if Plus then
            local PlusGrabPart = Plus:FindFirstChild("PlusGrabPart")
            if PlusGrabPart and PlusGrabPart.Color == Color3.fromRGB(31, 128, 29) then
                invs_touch6(PlusGrabPart)
            end
        end
    end
end
----------------------------------------------------------------------
function hmc(alvo, value)
    local h = OthersV.character:FindFirstChild("Head")
    local t = OthersV.character:FindFirstChild("Torso")

    if not h or not t or not hrp then return end

    if value then
        Valores.savedCFrame = hrp.CFrame

        OthersV.bp = Instance.new("BodyPosition")
        OthersV.bp.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
        OthersV.bp.D = 1000
        OthersV.bp.P = 50000
        OthersV.bp.Parent = hrp

        Connections.connection2 = Vglobais.RunService.Stepped:Connect(function()
            if h.CanCollide then h.CanCollide = false end
            if t.CanCollide then t.CanCollide = false end

            if alvo and alvo.PrimaryPart then
                OthersV.bp.Position = alvo.PrimaryPart.Position - Vector3.new(0, alvo.PrimaryPart.Size.Y / 2 + 10, 0)
            end
        end)
    else
        if Connections.connection2 then
            Connections.connection2:Disconnect()
            Connections.connection2 = nil
        end

        if OthersV.bp then
            OthersV.bp:Destroy()
            OthersV.bp = nil
        end

        if Valores.savedCFrame then
            hrp.CFrame = Valores.savedCFrame
            Valores.savedCFrame = nil
        end

        if not h.CanCollide then h.CanCollide = true end
        if not t.CanCollide then t.CanCollide = true end
    end
end
----------------------------------------------------------------------
function Simplekill()
    local playerName = Connections.selectedPlayer5
    if playerName then
        local alvoPlayer = Vglobais.Players:FindFirstChild(playerName)
        if alvoPlayer and alvoPlayer.Character then
            local alvo = alvoPlayer.Character
            hmc(alvo, true)
        end
    end
end
----------------------------------------------------------------------
local connection55555

local function deletePaintParts()
    for _, descendant in ipairs(workspace:GetDescendants()) do
        if descendant:IsA("Part") and descendant.Name == "PaintPlayerPart" then
            descendant:Destroy()
        end
    end

    if Toggle.AntiPaint then
        if connection55555 then connection55555:Disconnect() end
        connection55555 = workspace.DescendantAdded:Connect(function(descendant)
            if Toggle.AntiPaint and descendant:IsA("Part") and descendant.Name == "PaintPlayerPart" then
                descendant:Destroy()
            end
        end)
    else
        if connection55555 then
            connection55555:Disconnect()
            connection55555 = nil
        end
    end
end
----------------------------------------------------------------------
local function teleportParts()
    local gps = workspace:FindFirstChild("GrabParts")
    if not gps then return end

    local gp = gps:FindFirstChild("GrabPart")
    if not gp then return end

    local weldConstraint = gp:FindFirstChildOfClass("WeldConstraint")
    if not weldConstraint or not weldConstraint.Part1 then return end

    local model = weldConstraint.Part1
    while model and not model:IsA("Model") do
        model = model.Parent
    end
    if not model or not model:FindFirstChild("HumanoidRootPart") then return end

    local cframePernasBracos = CFrame.new(Vector3.new(0, -49999, 0))
    local cframeHRP = CFrame.new(Vector3.new(0, -500000, 0))

    local head = model:FindFirstChild("Head")
    if not head then return end

    local bodyPosition = Instance.new("BodyPosition")
    bodyPosition.MaxForce = Vector3.new(math.huge, math.huge, math.huge)
    bodyPosition.Position = head.Position
    bodyPosition.P = 1e6
    bodyPosition.D = 500  
    bodyPosition.Parent = head

    for _, part in ipairs(model:GetChildren()) do
        if part:IsA("BasePart") and (part.Name == "Left Arm" or part.Name == "Right Arm" or part.Name == "Left Leg" or part.Name == "Right Leg") then
            part.CFrame = cframePernasBracos
        end
    end

    task.wait(0.08)

    local humanoidRootPart = model:FindFirstChild("HumanoidRootPart")
    if humanoidRootPart then
        humanoidRootPart.CFrame = cframeHRP
    end
    task.wait()
    SetNetworkOwnerEvent:FireServer(head, OthersV.camera.CFrame)
    task.wait(1)
    bodyPosition:Destroy()
end
------------------------------------------------------------------ 
local ZoomConfig = {
    Enabled = false,
    DefaultFOV = 70,
    MinFOV = 20,
    MaxFOV = 100,
    ZoomStep = 5,
    TransitionSpeed = 5
}
------------------------------------------------------------------ 
local function setBarrierCollisionsFalse()
    for i = 1, 5 do
        local plot = workspace.Plots:FindFirstChild("Plot" .. i)
        if plot then
            local barrier = plot:FindFirstChild("Barrier")
            if barrier then
                for _, part in pairs(barrier:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end
    end
end

function BreakBarrier()
    local originalCFrame = CFrame.new(265.446777, -5.89843988, 453.200714, -0.840176582, 0.163374692, -0.51711899, -0.0011215657, 0.95301801, 0.302911609, 0.542311788, 0.25507924, -0.800520182)
    local elevatedCFrame = CFrame.new(originalCFrame.Position + Vector3.new(0, 1, 0))
    Vglobais.ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer("BallSnowball", elevatedCFrame, Vector3.new(0, 0, 0))
    task.wait(3)
    if workspace:FindFirstChild(Vglobais.player.Name .. "SpawnedInToys"):FindFirstChild("BallSnowball") then
        setBarrierCollisionsFalse()
    end
end
------------------------------------------------------------------ 
local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/firemax-x/test/refs/heads/main/orion5')))()
local Window = OrionLib:MakeWindow({Name = "Firehub", IntroText = "Firehub", HidePremium = false, SaveConfig = true, ConfigFolder = "FireHub"})
---------------------------------APARTE-------------------------------
function bsp(mode)
    if Connections.selectedPlayer3 then
        local targetCharacter = Connections.selectedPlayer3.Character
        if targetCharacter then
            local hrp = targetCharacter:FindFirstChild("HumanoidRootPart")
            local hd = targetCharacter:FindFirstChild("Humanoid")
            local head = targetCharacter:FindFirstChild("Head")
            if hrp then
                if mode == "bring" and targetCharacter.Parent == workspace then
                    invs_touch6(hrp)
                    while not verify(hrp) do
                        task.wait()
                    end
                    local targetPosition = Vglobais.player.Character:WaitForChild("HumanoidRootPart").CFrame * CFrame.new(0, 0, -10)
                    targetCharacter:SetPrimaryPartCFrame(targetPosition)
                    while not IsAround(hrp, 30) do
                        task.wait()
                    end
                    dgl(hrp)
                elseif mode == "kill" and targetCharacter.Parent == workspace then
                    invs_touch6(hrp)
                    while not verify(hrp) do
                        task.wait()
                    end
                    hd:ChangeState(Enum.HumanoidStateType.Dead)
                    task.wait(1)
                    dgl(hrp)
                elseif mode == "ragdoll" then
                    if head then
                        Vglobais.ReplicatedStorage.MenuToys.SpawnToyRemoteFunction:InvokeServer(
                            "BallSnowball",
                            head.CFrame * CFrame.new(-0.5, 2, 19.5),
                            Vector3.new(0, 0, 0)
                        )
                    else
                        warn("Head não encontrado no personagem do jogador.")
                    end
                end
            end
        else
            OrionLib:MakeNotification({
                Name = "Note",
                Content = "Cannot perform action. The player is in Home.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
        RemoveHighlightFromPlayer(Connections.selectedPlayer3)
    end
end


--// head.CFrame * CFrame.new(-0.5, 2, 19.5)
---------------------------------HUB----------------------------------

local playerList = GetPlayerList()

local GrabTab = Window:MakeTab({
    Name = "Grabs",
    Icon = "rbxassetid://12684121161",
    PremiumOnly = false
})

local AuraTab = Window:MakeTab({
    Name = "Auras",
    Icon = "rbxassetid://14376169362",
    PremiumOnly = false
})

local BlobTab = Window:MakeTab({
    Name = "BlobTab",
    Icon = "rbxassetid://14436167187",
    PremiumOnly = false
})

local looptab = Window:MakeTab({
    Name = "Loop",
    Icon = "rbxassetid://11162756258",
    PremiumOnly = false
})

local MiscTab = Window:MakeTab({ 
    Name = "Misc",
    Icon = "rbxassetid://10885655986",
    PremiumOnly = false
})

local ControlTab = Window:MakeTab({
    Name = "Tweaks",
    Icon = "rbxassetid://4720536478",
    PremiumOnly = false
})

local CustomizeTab = Window:MakeTab({
    Name = "Customize",
    Icon = "rbxassetid://12120710060",
    PremiumOnly = false
}) 

local KeyTab = Window:MakeTab({
    Name = "Keybinds",
    Icon = "rbxassetid://11710306232", 
    PremiumOnly = false
})

local AutoTab = Window:MakeTab({
    Name = "Auto Things",
    Icon = "rbxassetid://103950363563606",
    PremiumOnly = false
})

local ConfigsTab = Window:MakeTab({
    Name = "Settings",
    Icon = "rbxassetid://6663675885",
    PremiumOnly = false
})

local ScriptTab = Window:MakeTab({
    Name = "Scripts",
    Icon = "rbxassetid://9405930424",
    PremiumOnly = false
})


GrabTab:AddParagraphPosition("Grab Tab", "------------------------Grabs-------------------", "Center")
GrabTab:AddSection({
    Name = "Normal Grabs"
})

killGrab = GrabTab:AddToggle({
    Name = "Kill Grab",
    Default = false,
    Callback = function(value)
        Vgrabbing.Toggle = value
        initGrabbingCheck()
    end   
})

GrabTab:AddBind({
    Name = "Kill Grab Keybind",
    Default = Enum.KeyCode.NumLock,
    Hold = false,
    Callback = function()
        Vgrabbing.Toggle = not Vgrabbing.Toggle
        killGrab:Set(Vgrabbing.Toggle)
    end    
})

GrabTab:AddSection({Name = "--------------------------"})

local Nocliptg = GrabTab:AddToggle({
    Name = "NoClip Grab",
    Default = false,
    Callback = function(value)
        _G.isGrabbingEnabled = value
    end    
})

GrabTab:AddSection({Name = "--------------------------"})

lowgravitygrab = GrabTab:AddToggle({
    Name = "Gravity Grab",
    Default = false,
    Callback = function(Value)
        ToggleLowGravity(Value)
    end
})

GrabTab:AddBind({
    Name = "Gravity Grab Keybind",
    Default = Enum.KeyCode.NumLock,
    Hold = false,
    Callback = function()
        Toggle.lowGravityEnabled = not Toggle.lowGravityEnabled
        lowgravitygrab:Set(Toggle.lowGravityEnabled)
    end    
})

GrabTab:AddSection({Name = "--------------------------"})

InvisiT = GrabTab:AddToggle({
    Name = "Invisible Grab",
    Default = false,
    Callback = function(Value)
        Toggle.InvisibleGrabEnabled = Value
    end    
})

GrabTab:ColoredAddLabel("Keybind in the Keybinds Tab", nil, "Center")

GrabTab:AddSection({Name = "--------------------------"})

MassLessGrab = GrabTab:AddToggle({
    Name = "MassLess Grab",
    Default = false,
    Callback = function(Value)
        Toggle.masslessgrab = Value
        switchChildAddedState(Value)
    end
})

GrabTab:AddBind({
    Name = "MassLessGrab Keybind",
    Default = Enum.KeyCode.NumLock,
    Hold = false,
    Callback = function()
        Toggle.masslessgrab = not Toggle.masslessgrab
        MassLessGrab:Set(Toggle.lowGravityEnabled)
    end    
})
    
GrabTab:AddSection({Name = "--------KickStuff-------"})

GrabTab:AddToggle({
    Name = "KickGrab (Not working)",
    Default = false,
    Callback = function(Value)
    Toggle.ativado = Value
    end    
})

GrabTab:AddToggle({
    Name = "KickAuto (Not working)",
    Default = false,
    Callback = function(Value)
        Toggle.ativado4 = Value
    end    
})
    
GrabTab:AddSection({Name = "--------------------------"})

SuperStg = GrabTab:AddToggle({
    Name = "Super Strength",
    Default = false,
    Color = Color3.fromRGB(142, 69, 133),
    Callback = function(Value)
        Toggle.ativado6 = Valuedwwwwwwwwwwwdw
        toggleChildAddedConnection(Toggle.ativado6)
    end    
})

GrabTab:AddBind({
    Name = "Super Strength Keybind",
    Default = Enum.KeyCode.NumLock,
    Hold = false,
    Callback = function()
        Toggle.ativado6 = not Toggle.ativado6
        SuperStg:Set(Toggle.ativado6)
    end    
})  

GrabTab:AddSlider({
    Name = "Strength Value",
    Min = 0,
    Max = 10000,
    Default = 5,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Value",
    Callback = function(Value)
        if Toggle.ativado6 then
            Valores.strength = Value
        end    
    end    
})

MiscTab:AddParagraphPosition("Imunity Tab", "----------------------imunity-------------------", "Center")

MiscTab:AddToggle({
    Name = "AntiGrab",
    Default = false,
    Callback = function(State)
        Toggle.AgToggle = State 
        if Toggle.AgToggle then
            ag()
        end
    end
})

Antikickt = MiscTab:AddToggle({
    Name = "AntiKick",
    Default = false,
    Callback = function(State2)
        Toggle.AntiKick = State2 
        if State2 then
            checkAndSpawnKunai()  
        end
    end
})

MiscTab:AddToggle({
    Name = "AntiBlob2.0",
    Default = true,
    Callback = function(Value)
        toggleRootAttachment(Value)
        Toggle.antiblob3 = Value
    end    
})


MiscTab:AddToggle({
    Name = "Anti Fire",
    Default = false,
    Callback = function(Value)
        Toggle.Antifiretg = Value 
    end    
})

MiscTab:AddToggle({
    Name = "Anti Void",
    Default = true,
    Callback = function(Value)
        local function safeSetCanTouch(path)
            local part = path and path:FindFirstChild("PoisonHurtPart")
            if part then
                part.CanTouch = not Value
            end
            part = path and path:FindFirstChild("PaintPlayerPart")
            if part then
                part.CanTouch = not Value
            end
        end

        local map = workspace:FindFirstChild("Map")
        if map then
            local hole = map:FindFirstChild("Hole")
            if hole then
                safeSetCanTouch(hole:FindFirstChild("PoisonSmallHole"))
                safeSetCanTouch(hole:FindFirstChild("PoisonBigHole"))
            end
        end
    end
})

MiscTab:AddToggle({
    Name = "Anti Paint",
    Default = false,
    Callback = function(Value)
        Toggle.AntiPaint = Value
        if Toggle.AntiPaint then
            task.spawn(deletePaintParts) 
        else
            deletePaintParts()
        end
    end
})
    
MiscTab:AddSection({
    Name = "Teleport Stuff"
})

MiscTab:AddToggle({
    Name = "Teleport",
    Default = true,
    Callback = function(Value3)
        Toggle.ativado3 = Value3
    end    
})

MiscTab:AddSection({
    Name = "-------------"
})

dropdown3 = MiscTab:AddDropdown({
    Name = "Select Player",
    Default = "Nenhum",
    Options = GetPlayerNames(),
    Callback = function(value)
        local playerName = value:match("^(.-) %(")
        local player = Vglobais.Players:FindFirstChild(playerName)
        Connections.selectedPlayer3 = player
        AddHighlightToPlayer(player)
    end
})

MiscTab:AddSection({
    Name = "-------------"
})

MiscTab:AddButton({
    Name = "Teleport to Selected Player",
    Callback = function()
        if Connections.selectedPlayer3 then
            TeleportToPlayer(Connections.selectedPlayer3.Name .. " (" .. Connections.selectedPlayer3.DisplayName .. ")")
        end
    end
})

MiscTab:AddButton({
    Name = "Bring Player",
    Callback = function()
        if Connections.selectedPlayer3 then
            bsp("bring")
        end
    end
})

MiscTab:AddButton({
    Name = "Kill Player",
    Callback = function()
        if Connections.selectedPlayer3 then
            bsp("kill")
        end
    end
})

MiscTab:AddButton({
    Name = "Ragdoll Player",
    Callback = function()
        if Connections.selectedPlayer3 then
            bsp("ragdoll")
        end
    end
})

MiscTab:AddSection({
    Name = "-------------"
})

MiscTab:AddDropdown({
    Name = "Teleport to a Location",
    Default = "",
    Options = {"Green House", "Red House", "Farm", "Blue House", "Chinese House", "Purple House", "Green House2", "--------------------", "Ice Mountain", "Secret1", "Secret2", "Sky Island", "Broken Bridge", "Spawn"},
    Callback = function(selected)
        if locations[selected] then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = locations[selected]
        elseif selected == "--------------------" then
            OrionLib:MakeNotification({
                Name = "Separador",
                Content = "Este é um separador :D",
                Image = "rbxassetid://4483345998",
                Time = 2
            })
        end
    end    
})

--Idea de selection \n

MiscTab:AddSection({
    Name = ""
})

MiscTab:ColoredAddLabel("---------------- Player Stuff ----------------", nil, "Center")

MiscTab:AddToggle({
    Name = "Infinite Jump",
    Default = _G.InfiniteJump,
    Callback = function(Value)
        _G.InfiniteJump = Value
    end
})

MiscTab:AddSlider({
    Name = "Jump Power",
    Min = 24,
    Max = 100,
    Default = Valores.jumpPower,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    Callback = function(Value)
        Valores.jumpPower = Value
        local humanoid = OthersV.character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = Valores.jumpPower
        end
    end
})

MiscTab:AddSlider({
    Name = "Speed",
    Min = 0,
    Max = 100,
    Default = 1,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Speed Value",
    Callback = function(Value)
        startMoving2()
        _G.Velocidade = Value
    end    
})

AuraTab:AddParagraphPosition("Aura Tab", "----------------------Auras-------------------", "Center")
AuraTab:AddSection({
    Name = ""
})

AuraTab:AddToggle({
    Name = "KickAura (Not working)",
    Default = false,
    Callback = function(value)
        if value then
            OrionLib:MakeNotification({
                Name = "Error",
                Content = "The KickAura service is not working at the moment.",
                Image = "rbxassetid://4483345998",
                Time = 5 
            })
        end
    end
})

AuraTab:AddToggle({
    Name = "Kill Aura (Working on it)",
    Default = false,
    Callback = function(value)
        Toggle.Killaura2 = value
        KillToggle(value)
    end
})

AuraTab:AddToggle({
    Name = "Clean Aura (Need Some fixes) ",
    Default = false,
    Callback = function(value)
        Toggle.invisTouchEnabled = value
        if value then
            spawn(findTouchAndMoveItem2)
        end
    end
})

AuraTab:AddSection({
    Name = ""
})

AuraTab:ColoredAddLabel("Toggles and that Stuff!", nil, "Center")

AuraTab:AddToggle({
    Name = "Ragdoll all Loop",
    Default = false,
    Callback = function(ragdollloop)
        Toggle.LoopRagdollAll = ragdollloop
        if ragdollloop then
            OrionLib:MakeNotification({
                Name = "Note",
                Content = "Please create your Banana and click in it, if you haven’t already; otherwise, press F6 and proceed.",
                Image = "rbxassetid://4483345998",
                Time = 8
            })
            while Toggle.LoopRagdollAll do
                updateBananaPosition("allplayers")
                task.wait(1.5)
            end
        end
    end    
})

AuraTab:AddToggle({
    Name = "FireAll",
    Default = false,
    Callback = function(Value14)
        Toggle.ativado8 = Value14   
        if Value14 then
            OrionLib:MakeNotification({
                Name = "Note",
                Content = "Please create your fire if you haven’t already; otherwise, press F5 and proceed.",
                Image = "rbxassetid://4483345998",
                Time = 8
            })
        end
    end    
})

KeyTab:AddParagraphPosition("Key Tab", "----------------- Keybind Tab ------------------", "Center")

KeyTab:AddSection({
    Name = "KickStuff"
})

KeyTab:AddBind({
    Name = "KickGrab keybind (Not working)",
    Hold = false,
    Default = Enum.KeyCode.F1,
    Callback = function()
        OrionLib:MakeNotification({
            Name = "Error",
            Content = "The KickGrab service is not working at the moment.",
            Image = "rbxassetid://4483345998",
            Time = 5 
        })
    end    
})

KeyTab:AddBind({
    Name = "KickAuto keybind (Not working)",
    Hold = false,
    Default = Enum.KeyCode.F1,
    Callback = function()
        OrionLib:MakeNotification({
            Name = "Erro",
            Content = "The KickAuto service is not working at the moment.",
            Image = "rbxassetid://4483345998", 
            Time = 5 
        })
    end
})

KeyTab:AddSection({
    Name = "For All or Auras"
})

KeyTab:AddBind({
    Name = "FireAll Keybind",
    Hold = false,
    Default = Enum.KeyCode.F5,
    Callback = function()
        if Toggle.ativado8 then
            local campfire = findCampfire()
            if not campfire then
                spawnToy()
                Vglobais.RunService.RenderStepped:Wait(0.3)
                campfire = findCampfire()
            end
            invsTouchCampfire()
            updateCampfirePosition()
        end
    end    
})

KeyTab:AddBind({
    Name = "Ragdoll Keybind",
    Hold = false,
    Default = Enum.KeyCode.F6,
    Callback = function()
        updateBananaPosition("allplayers")
    end    
})

KeyTab:AddBind({
    Name = "BreakBarrier Keybind",
    Hold = false,
    Default = Enum.KeyCode.Y,
    Callback = function()
        BreakBarrier()
    end    
})

KeyTab:AddSection({
    Name = ""
})

KeyTab:ColoredAddLabel("Grabs", nil, "Center")

KeyTab:AddBind({
    Name = "Poison Grab Keybind",
    Hold = false,
    Default = Enum.KeyCode.F8,
    Callback = function()
        togglePoisonSystem()
    end
})

KeyTab:AddBind({
    Name = "AutoRemoveParts Grab Keybind",
    Hold = false,
    Default = Enum.KeyCode.B,
    Callback = function()
        teleportParts()
    end
})


KeyTab:AddBind({
    Name = "Invisible Grab keybind",
    Hold = false,
    Default = Enum.KeyCode.F8,
    Callback = function()
        InvisiT:Set(not InvisiT.Value)
    end
})


KeyTab:AddBind({
    Name = "NoClip Grab Keybind",
    Hold = false,
    Default = Enum.KeyCode.RightAlt,
    Callback = function()
        _G.isGrabbingEnabled = not _G.isGrabbingEnabled
        Nocliptg:Set(_G.isGrabbingEnabled)
    end
})

KeyTab:AddSection({
    Name = "Fun"
})

KeyTab:AddBind({
    Name = "Fast Click Keybind",
    Hold = false,
    Default = Enum.KeyCode.End,
    Callback = function()
        initializeRagdollScript()
    end    
})

KeyTab:AddBind({
    Name = "Infinite Zoom keybind",
    Hold = false,
    Default = Enum.KeyCode.Delete,
    Callback = function()
        toggleScript2()
    end    
})

KeyTab:AddBind({
    Name = "Tp Click Keybind",
    Hold = false,
    Default = Enum.KeyCode.F7,
    Callback = function()
        findTouchAndMoveItem() 
    end    
})

KeyTab:AddBind({
    Name = "Bring Keybind",
    Hold = false,
    Default = Enum.KeyCode.N,
    Callback = function()
        setCanQueryForAllBringBoxes(true)
        task.wait()
        bring()
    end
})

KeyTab:AddBind({
    Name = "Rocket Keybind",
    Hold = false,
    Default = Enum.KeyCode.H,
    Callback = function()
        task.spawn(function()
            GoRocket()
        end)
        task.wait(0.34)
        task.spawn(function()
            GoRocket()
        end)
    end
})

KeyTab:AddSection({
    Name = "AntiLag"
})

KeyTab:AddBind({
    Name = "Anti Lag",
    Hold = false,
    Default = Enum.KeyCode.PageDown,
    Callback = function()
        Toggle.characterAndBeamMoveEnabled = not Toggle.characterAndBeamMoveEnabled
        updateToggle()
    end    
})

KeyTab:AddSection({
    Name = "Anchor things"
})

KeyTab:AddBind({
    Name = "Anchor",
    Hold = false,
    Default = Enum.KeyCode.Insert,
    Callback = function()
        findAndAddPhysicsObjects(game.Workspace)
    end    
})

KeyTab:AddBind({
    Name = "UnAnchor",
    Hold = false,
    Default = Enum.KeyCode.Home,
    Callback = function()
        findAndRemovePhysicsFromGrabParts()
    end    
})

KeyTab:AddBind({
    Name = "UnAnchorAll",
    Hold = false,
    Default = Enum.KeyCode.PageUp,
    Callback = function()
        removeAllPhysicsObjects() 
    end    
})

KeyTab:AddSection({
    Name = "Control"
})

KeyTab:AddBind({
    Name = "My Stuff Control",
    Hold = false,
    Default = Enum.KeyCode.F3,
    Callback = function()
        toggleMovementForFolder(game.Players.LocalPlayer.Name .. "SpawnedInToys")
    end
})

    
KeyTab:AddBind({
    Name = "Others Stuff Control",
    Hold = false,
    Default = Enum.KeyCode.F4,
    Callback = function()
        toggleMovementForFolder(nil, true)  
    end
})

KeyTab:AddBind({
    Name = "Clean",
    Hold = false,
    Default = Enum.KeyCode.RightControl,
    Callback = function()
        restoreModelsFromFireHub()
    end
})

KeyTab:AddBind({
    Name = "add",
    Hold = false,
    Default = Enum.KeyCode.M,
    Callback = function()
        prossesmodel()
    end
})

KeyTab:AddSection({
    Name = "Freeze"
})

KeyTab:AddBind({
    Name = "Freeze (Nao Funcionando)",
    Hold = false,
    Default = Enum.KeyCode.F1,
    Callback = bindFreeze
})

KeyTab:AddBind({
    Name = "UnFreeze (Nao Funcionando)",
    Hold = false,
    Default = Enum.KeyCode.F1,
    Callback = bindUnfreeze
})

KeyTab:AddSection({
    Name = "NoClip"
})

KeyTab:AddBind({
    Name = "NoClip Keybind",
    Hold = false,
    Default = Enum.KeyCode.F2,
    Callback = function()
        toggleCollision()
    end
})

KeyTab:AddSection({
    Name = "Whitelist"
})

KeyTab:AddBind({
    Name = "Add Whitelist",
    Hold = false,
    Default = Enum.KeyCode.P,
    Callback = function()
        toggleHighlight()
    end
})

KeyTab:AddSection({
    Name = "Lag Stuff"
})

KeyTab:AddBind({
    Name = "Lag Keybind",
    Hold = false,
    Default = Enum.KeyCode.F8,
    Callback = function()
        toggleLag(not Toggle.lagStuff)
    end
})

KeyTab:AddSection({
    Name = "Person"
})

KeyTab:AddBind({
    Name = "Fly",
    Hold = false,
    Default = Enum.KeyCode.G,
    Callback = toggleFly
})

KeyTab:AddBind({
    Name = "Distançe of Ground",
    Hold = false,
    Default = Enum.KeyCode.P,
    Callback = function()
        toggleHeight()
    end    
})

KeyTab:AddBind({
    Name = "Zoom keybind",
    Default = Enum.KeyCode.T,
    Hold = true,
    Callback = function(held)
        ZoomConfig.Enabled = held
        if held then
            local function onScroll(input)
                if ZoomConfig.Enabled and input.UserInputType == Enum.UserInputType.MouseWheel then
                    local newFOV = OthersV.camera.FieldOfView - (input.Position.Z * ZoomConfig.ZoomStep)
                    OthersV.camera.FieldOfView = math.clamp(newFOV, ZoomConfig.MinFOV, ZoomConfig.MaxFOV)
                end
            end

            local scrollConnection = Vglobais.UserInputService.InputChanged:Connect(onScroll)
            
            while ZoomConfig.Enabled do
                task.wait()
            end

            scrollConnection:Disconnect()

            while math.abs(OthersV.camera.FieldOfView - ZoomConfig.DefaultFOV) > 0.1 do
                OthersV.camera.FieldOfView = OthersV.camera.FieldOfView + ((ZoomConfig.DefaultFOV - OthersV.camera.FieldOfView) * 0.2)
                task.wait(0.01)
            end
            OthersV.camera.FieldOfView = ZoomConfig.DefaultFOV
        end
    end
})

KeyTab:AddBind({
    Name = "Teleport keybind",
    Hold = false,
    Default = Enum.KeyCode.Z,
    Callback = function()
        if Toggle.ativado3 then
            Teleport(OthersV.mouse.Hit.p)
        end    
    end
})

KeyTab:AddSection({
    Name = "Misc"
})

KeyTab:AddSlider({
    Name = "Distançe Speed",
    Min = 0.025,
    Max = 5,
    Default = 0.25,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 0.5,
    ValueName = "Velocity Value",
    Callback = function(Value)
        Valores.HeightSpeed = Value
    end    
})

KeyTab:AddSlider({
    Name = "Fly Speed",
    Min = 25,
    Max = 1000,
    Default = 50,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Velocity Value",
    Callback = function(Value)
        Valores.FlySpeed = Value
    end    
})

ControlTab:AddParagraphPosition("Control Tab", "   --------------- Control Tab ---------------", "Center")
ControlTab:AddSection({Name = ""})
ControlTab:ColoredAddLabel("My Control Stuff", nil, "Center")

ControlTab:AddSlider({
    Name = "Control Velocity",
    Min = 0,
    Max = 1000,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Velocity Value",
    Callback = function(Value8)
        if Value8 then
            Valores.velocidadem = Value8
        end
    end    
})

ControlTab:AddSlider({
    Name = "Control Distançe",
    Min = 2,
    Max = 1000,
    Default = 10,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Distance Value",
    Callback = function(Value9)
        if Value9 then
            Valores.distanciam = Value9
        end
    end    
})

ControlTab:AddSection({Name = "Mode"})

Ctab = ControlTab:AddDropdown({
    Name = "Modes",
    Default = "Normal",
    Options = {"Normal", "Vertical Movement", "Additional Features", "Organize Models"},
    Callback = function(Value)
        Connections.selectedmode = Value    
    end    
})

ControlTab:AddParagraphPosition("\n^\n|\nNote!", "\n\nThis should only function when the mode is set to vertical movement. You can also adjust the height as needed!", "Center")

function Loopctab()
    task.spawn(function()
        while true do
            if Connections.selectedmode == "Normal" then
                Ctab:Set("")
            end
            task.wait(1)
        end
    end)
end
    

ControlTab:AddSlider({
    Name = "Control Velocity",
    Min = 0,
    Max = 1000000,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Velocity Value",
    Callback = function(Value)
        if Value then
            Valores.velocidadet = Value
        end
    end    
})

ControlTab:AddSection({
    Name = "Rotation"
}) 

ControlTab:AddSlider({
    Name = "Turn Down|Up",
    Min = -180,
    Max = 180,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Grau",
    Callback = function(Value)
        Valores.cimaRotacao = math.rad(Value)  
    end    
})


ControlTab:AddSlider({
    Name = "Turn Right|Left",
    Min = -180,
    Max = 180,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Grau",
    Callback = function(Value)
        Valores.ladoRotacao = math.rad(Value)  
    end    
})

ControlTab:AddSection({
    Name = "Height"
}) 

ControlTab:AddSlider({
    Name = "Height",
    Min = -20,
    Max = 500,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Height Value",
    Callback = function(Value12)
        if Value12 then
            Valores.altura = Value12
        end
    end    
})

ControlTab:AddSection({   
    Name = "Center"
}) 

local highlightLoop = nil

MainPlayerDp = ControlTab:AddDropdown({
    Name = "Select Player",
    Default = "",
    Options = GetPlayerNames(),
    Callback = function(Value)
        if Toggle.MainPlayerT then
            local playerName = string.match(Value, "^(.-) %(")
            local selectedPlayer = Vglobais.Players:FindFirstChild(playerName)

            if selectedPlayer then
                -- Remove apenas o Highlight pertencente ao script
                for _, player in pairs(Vglobais.Players:GetPlayers()) do
                    if player.Character then
                        local highlight = player.Character:FindFirstChild("Highlight")
                        if highlight and highlight.Name == "PlayerHighlight" then
                            highlight:Destroy()
                        end
                    end
                end

                local function applyHighlight(character)
                    local highlight = Instance.new("Highlight")
                    highlight.Name = "PlayerHighlight"  
                    highlight.Parent = character
                    highlight.FillColor = Color3.new(0, 0, 0)
                    highlight.OutlineColor = Color3.new(85, 0, 0)
                    highlight.Adornee = character

                    if highlightLoop then
                        highlightLoop:Disconnect()
                    end

                    highlightLoop = game:GetService("RunService").Heartbeat:Connect(function()
                        if not character:FindFirstChild("Humanoid") or character.Humanoid.Health <= 0 then
                            highlight:Destroy()
                            highlightLoop:Disconnect()
                        end
                    end)

                    task.spawn(function()
                        while Toggle.MainPlayerT and selectedPlayer == Connections.MainPlayer do
                            task.wait(2)
                            for _, player in pairs(Vglobais.Players:GetPlayers()) do
                                if player.Character and player ~= selectedPlayer then
                                    local otherHighlight = player.Character:FindFirstChild("PlayerHighlight")
                                    if otherHighlight then
                                        otherHighlight:Destroy()
                                    end
                                end
                            end
                        end
                    end)
                end
                selectedPlayer.CharacterAdded:Connect(function(character)
                    applyHighlight(character)
                end)

                if selectedPlayer.Character then
                    applyHighlight(selectedPlayer.Character)
                end

                Connections.MainPlayer = selectedPlayer
            end
        else
            MainPlayerDp:Set("")  
            Connections.MainPlayer = nil  
            OrionLib:MakeNotification({
                Name = "ATTENTION",
                Content = "Toggle Player center not Working",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
    end    
})

ControlTab:AddToggle({
    Name = "Player Center",
    Default = false,
    Callback = function(Value)
        Toggle.MainPlayerT = Value
        if not Value then
            MainPlayerDp:Set("")  
            Connections.MainPlayer = nil 
            for _, player in pairs(Vglobais.Players:GetPlayers()) do
                if player.Character then
                    local highlight = player.Character:FindFirstChild("PlayerHighlight")
                    if highlight then
                        highlight:Destroy()
                    end
                end
            end
            if highlightLoop then
                highlightLoop:Disconnect()
            end
        end
    end    
})

ControlTab:AddSection({
    Name = "End Of Control\n"
})

ControlTab:ColoredAddLabel("Gravity Grab Config", nil, "Center")

ControlTab:AddSlider({
    Name = "Back or Go",
    Min = 0,
    Max = 10000,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Value",
    Callback = function(Value)
        Valores.Eixo.X = Value
        if Toggle.lowGravityEnabled then
            applyEffects()
        end
    end       
})

ControlTab:AddSlider({
    Name = "Up or Down",
    Min = 0,
    Max = 10000,
    Default = 0,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Value",
    Callback = function(Value)
        Valores.Eixo.Y = Value
        if Toggle.lowGravityEnabled then
            applyEffects()
        end
    end       
})

ControlTab:AddSlider({
    Name = "Right or Left",
    Min = 0,
    Max = 10000,
    Default = 5,
    Color = Color3.fromRGB(142, 69, 133),
    Increment = 1,
    ValueName = "Value",
    Callback = function(Value)
        Valores.Eixo.Z = Value
        if Toggle.lowGravityEnabled then
            applyEffects()
        end
    end      
})

ControlTab:AddSection({
    Name = "Stabilization"
})


local dontRotateToggle = ControlTab:AddToggle({
    Name = "Dont Rotate.",
    Default = false,
    Callback = function(Value)
        if Value and not Toggle.lowGravityEnabled then
            OrionLib:MakeNotification({
                Name = "Rotation",
                Content = "Não é possível porque só funciona quando o sistema está ligado.",
                Time = 8
            })
        else
            Toggle.bodyGyroEnabled = Value
            applyEffects()
        end
    end
})

CustomizeTab:AddParagraphPosition("Customize Tab", "   ----------------- Customize Tab ------------------", "Center")

CustomizeTab:AddSection({
    Name = "Corsair things"
})

CustomizeTab:AddColorpicker({
    Name = "Color of Corsair",
    Default = selectedColor,
    Callback = function(Value)
        selectedColor = Value
        if not rainbowActive then
            updateFramesColor(Value)
        end
    end
})

CustomizeTab:AddButton({
	Name = "Reset Color",
	Callback = function()
        restoreOriginalColors()
  	end    
})

CustomizeTab:AddToggle({
    Name = "RainbowColor",
    Default = false,
    Callback = function(Value)
        rainbowActive = Value
        if rainbowActive then
            spawn(rainbowColor)
        else
            updateFramesColor(selectedColor)
        end
    end
})

CustomizeTab:AddSection({
    Name = "Sky"
})

CustomizeTab:AddToggle({
    Name = "Night",
    Default = false,
    Callback = function(Value)
        if Value then
            game.Lighting.Brightness = 4
            game.Lighting.ClockTime = 5
        else
            game.Lighting.Brightness = 2
            game.Lighting.ClockTime = 14
        end
    end    
})

CustomizeTab:AddToggle({
    Name = "Moon?",
    Default = true,
    Callback = function(Value)
        if Value then
            OthersV.Sky.MoonAngularSize = 7
        else
            OthersV.Sky.MoonAngularSize = 0
        end
    end    
})

CustomizeTab:AddSection({
    Name = "-------------"
})

CustomizeTab:AddToggle({
    Name = "Chat Black",
    Default = false,
    Callback = function(Value)
        if Value == true then
            OrionLib:MakeNotification({
                Name = "Note!",
                Content = "Not Working Please try later!",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
        end
        --setBubbleChatColors(Value)
    end
})

CustomizeTab:AddToggle({
    Name = "Spy Chat",
    Default = false,
    Callback = function(state)
        Config2.enabled = state
    end
})

CustomizeTab:AddToggle({
    Name = "Clouds",
    Default = false,
    Callback = function(Value)
        if OthersV.clouds then
            OthersV.clouds.Enabled = Value
        end
    end    
})

CustomizeTab:AddColorpicker({
    Name = "CloudsColor",
    Default = Color3.fromRGB(255, 255, 255),
    Callback = function(Value)
        OthersV.clouds.Color = Value
    end	  
})

CustomizeTab:AddSection({
    Name = "Map"
})

CustomizeTab:AddToggle({
    Name = "Change?",
    Default = Toggle.colorPickerEnabled,
    Callback = function(value)
        Toggle.colorPickerEnabled = value
        if not value then
            restoreColors()
        end
    end
})

CustomizeTab:AddColorpicker({
    Name = "Color Of Map",
    Default = Connections.firstOriginalColor,
    Callback = function(value)
        if Toggle.colorPickerEnabled then
            changePartColors(value)
        end
    end	  
})

CustomizeTab:AddSection({
    Name = "Sea"
})

CustomizeTab:AddToggle({
    Name = "SeaWalk",
    Default = false,
    Callback = function(Value)
        setCanCollide42(Value)
        Antikickt:Set(Value)
    end
})

CustomizeTab:AddColorpicker({
    Name = "Sea Color",
    Default = Color3.fromRGB(9, 137, 207),
    Callback = function(color)
        changeColor51(color)
    end
})

CustomizeTab:AddButton({
    Name = "Normal Color",
    Callback = function()
        changeColor51(Color3.fromRGB(9, 137, 207))
    end
})

CustomizeTab:AddParagraph("!! ATTENTION !!","In SeaWalk use Shuriken or Kunai.")

ScriptTab:AddParagraphPosition("Script Tab", "   ----------------- Script Tab ------------------", "Center")

ScriptTab:AddSection({
    Name = ""
})

ScriptTab:AddButton({
    Name = "Dex",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/RezWare-SoftWare/Dex/refs/heads/main/Dex.lua"))()
     end    
})

ScriptTab:AddButton({
    Name = "Sirius",
    Callback = function()
        loadstring(game:HttpGet('https://sirius.menu/script'))()
    end    
})

ScriptTab:AddButton({
    Name = "InfYield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/firemax-x/Script/refs/heads/main/InfiniteYield'))()
    end    
})

ScriptTab:AddParagraphPosition("Note", "Yes, I make a tab ONLY for that .,.", "Left")

ConfigsTab:AddParagraphPosition("Config Tab", "   ----------------- Config Tab ------------------", "Center")

ConfigsTab:AddThemeDropdown()


ConfigsTab:AddSection({
    Name = ""
})

ConfigsTab:ColoredAddLabel("White List", nil, "Center")

wTable.SPDropdown = ConfigsTab:AddDropdown({
    Name = "Select Player",
    Options = wTable:GetPlayerNames(),
    Callback = function(selected)
        Connections.selectedPlayer = selected
    end
})

ConfigsTab:AddButton({
    Name = "Add",
    Callback = function()
        local player = wTable:FindPlayerByFullName(Connections.selectedPlayer)
        wTable:AddToWhitelist(player)
        wTable.SPDropdown:Set(nil)
    end
})

ConfigsTab:AddSection({
    Name = ""
})

wTable.WDropdown = ConfigsTab:AddDropdown({
    Name = "Players in Whitelist",
    Options = {},
    Callback = function(selected)
        Connections.selectedWhitelistPlayer = selected
    end
})

ConfigsTab:AddButton({
    Name = "Remove",
    Callback = function()
        local playerToRemove = wTable:FindPlayerByFullName(Connections.selectedWhitelistPlayer)
        if playerToRemove then
            wTable:RemoveFromWhitelist(playerToRemove)
        else
            warn("Jogador não encontrado na whitelist.")
        end
    end
})

ConfigsTab:AddSection({
    Name = ""
})

wtall = ConfigsTab:AddToggle({
    Name = "Whitelist All",
    Default = false,
    Callback = function(value)
        if Toggle.removeAllWhitelistEnabled and value then
            OrionLib:MakeNotification({
                Name = "Notification",
                Content = "Cannot activate 'Whitelist All' while 'Remove All' is active.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
            if wtall then
                wtall:Set(false)
            end
        else
            wTable:SetAutoWhitelist(value)
        end
    end
})


rmvwtall = ConfigsTab:AddToggle({
    Name = "Remove All",
    Default = false,
    Callback = function(value)
        if Toggle.autoWhitelistEnabled and value then
            OrionLib:MakeNotification({
                Name = "Notification",
                Content = "Cannot activate 'Remove All' while 'Whitelist All' is active.",
                Image = "rbxassetid://4483345998",
                Time = 5
            })
            rmvwtall:Set(false)
        else
            wTable:SetRemoveAllWhitelist(value)
        end
    end
})

ConfigsTab:AddSection({
    Name = "\nAntiGrab Settings"
})

ConfigsTab:AddToggle({
    Name = "Secret Anti Grab",
    Default = false,
    Callback = function(Value)
        local playerName = game.Players.LocalPlayer.Name
        if allowedUsers[playerName] then
            Toggle.toggleActiveAntiKick = Value
        else
            OrionLib:MakeNotification({
                Name = "Access denied!",
                Content = "You do not have permission to activate This Toggle.",
                Time = 5
            })
            Toggle.toggleActiveAntiKick = false
        end
    end
})

ConfigsTab:AddDropdown({
    Name = "AntiGrab Mode",
    Default = "Nothing",
    Options = {"Nothing", "TP AG", "Kill AG"},
    Callback = function(Selected)
        Vglobais.mode = Selected
    end
})

ConfigsTab:AddSection({
    Name = "Tp Click Settings"
})

LocationDrop = ConfigsTab:AddDropdown({
    Name = "Select Location",
    Default = "Void",
    Options = {"Spawn", "Green House", "Red House", "Farm", "Blue House", "Chinese House", "Purple House", "Green House2", "--------------------", "Ice Mountain", "Secret1", "Secret2", "Sky Island", "Broken Bridge", "Cofre", "Void", "Void2", "Hide"},
    Callback = function(value)
        if value == "--------------------" then
            OrionLib:MakeNotification({
                Name = "Separador",
                Content = "Este é um separador :D",
                Image = "rbxassetid://4483345998",
                Time = 3
            })
            LocationDrop:Set("Void")
        else
            selectedLocation = value
        end
    end
})

ConfigsTab:AddSection({
    Name = "Security"
})

ConfigsTab:AddToggle({
    Name = "Security Mode",
    Default = true,
    Callback = function(Value)
        Toggle.SecurityMode = Value
    end
})

ConfigsTab:AddSection({
    Name = "Blob Things"
})

ConfigsTab:AddToggle({
    Name = "Heavy Blob",
    Default = false,
    Callback = function(state)
        UpdateBodyPositionState(state)
    end
})

ConfigsTab:AddToggle({
    Name = "Danger Blob Mode",
    Default = false,
    Callback = function(Value)
        Toggle.allblobs = Value
    end
})

ConfigsTab:AddToggle({
    Name = "Current Blob",
    Default = true,
    Callback = function(state)
        Toggle.lBlob = state
    end
})

BlobTab:AddParagraphPosition("Blob Tab", "     ----------------- Blob Tab ------------------", "Center")

BlobTab:AddSection({
    Name = ""
})

coollabel = BlobTab:AddLabel("Total Blobs: 0")

ownerDropdown = BlobTab:AddDropdown({
    Name = "Select Owner",
    Default = "",
    Options = {},
    Callback = function(selectedDisplayString)
        if not blobThings.highlightActive then
            ownerDropdown:Set("")
            blobThings.selectedOwnerName = nil
            OrionLib:MakeNotification({
                Name = "Action Required",
                Content = "First Enable Remote Blob Toggle!!",
                Image = "rbxassetid://4483345998", 
                Time = 7
            })
            return
        end

        if blobThings.displayToOwnerMap[selectedDisplayString] then
            if blobThings.selectedOwnerName then
                removeCurrentHighlights()
            end

            blobThings.selectedOwnerName = blobThings.displayToOwnerMap[selectedDisplayString]
            Connections.selectedPlayer4 = blobThings.selectedOwnerName
            highlightBlobs(blobThings.selectedOwnerName)
        end
    end
})

BlobTab:AddToggle({
    Name = "Remote Blob Toggle",
    Default = false,
    Callback = function(state)
        blobThings.highlightActive = state
        Toggle.DropdownEnabled = state
        if not state then
            removeCurrentHighlights()
            ownerDropdown:Set("")
            blobThings.selectedOwnerName = nil
        else
            if blobThings.selectedOwnerName then
                highlightBlobs(blobThings.selectedOwnerName)
            end
        end
    end
})

BlobTab:AddSection({
    Name = "----------"
})

dropdown2 = BlobTab:AddDropdown({
    Name = "Select Player",
    Default = "",   
    Options = GetPlayerList(),  
    Callback = function(Value)
        if Value and Value ~= "" then
            local playerName = Value:match("^(.-) %(")
            if playerName then
                Connections.selectedPlayer2 = playerName
                local player = Vglobais.Players:FindFirstChild(playerName)
                if player then
                    AddHighlightToPlayer(player)  
                end
            end
        end
    end    
})

BlobTab:AddSection({
    Name = ""
})

BlobTab:AddButton({
    Name = "Lock",
    Callback = function()
        HandleButtonActions()
        LockAndGrab()
        dropdown2:Set("")
        removeCurrentHighlights()
    end
})

BlobTab:AddButton({
    Name = "Bring",
    Callback = function()
        HandleButtonActions()
        if Connections.selectedPlayer2 then
            local targetHumanoidRootPart = GetPlayerHumanoidRootPart(Connections.selectedPlayer2)
            if targetHumanoidRootPart then
                PerfectGrab("CreatureGrab", targetHumanoidRootPart)
                task.wait(0.4)
                PerfectGrab("CreatureDrop", targetHumanoidRootPart)
                dgl(targetHumanoidRootPart)
                dropdown2:Set("")
                removeCurrentHighlights()
            else
                warn("Target HumanoidRootPart not found for selected player.")
            end
        else
            warn("No player selected.")
        end
    end
})

BlobTab:AddToggle({
    Name = "Kick",
    Default = false,
    Callback = function(state)
        Toggle.BlobKick = state
        if Connections.selectedPlayer2 then
            local player = Vglobais.Players:FindFirstChild(Connections.selectedPlayer2)
            if player then
                RemoveHighlightFromPlayer(player)
                LoopDropAndGrab(player)
            end
        end
        dropdown2:Set("")
        removeCurrentHighlights()
    end
})


BlobTab:AddToggle({
    Name = "Destroy Server",
    Default = false,
    Callback = function(state)
        Toggle.BlobDt = state
        
        if not state then
            if Connections.selectedPlayer2 then
                local player = Vglobais.Players:FindFirstChild(Connections.selectedPlayer2)
                if player then
                    RemoveHighlightFromPlayer(player)
                end
            end
            running = false 
        end
        
        if state then
            coroutine.wrap(HandleGrabBlobs)() 
            MonitorNewPlayers() 
        end

        dropdown2:Set("") 
        removeCurrentHighlights() 
    end
})

BlobTab:AddSection({
    Name = "--------------"
})

BlobTab:AddButton({
    Name = "BringAll",
    Callback = function()
        local localPlayer = Vglobais.player

        for _, p in pairs(Vglobais.Players:GetPlayers()) do
            if p ~= localPlayer and p.Character then -- Exclui o jogador local
                task.spawn(function()
                    local hrp = p.Character:FindFirstChild("HumanoidRootPart")
                    if hrp then
                        PerfectGrab("CreatureGrab", hrp)
                        task.wait() -- Pequena pausa para sincronização
                        PerfectGrab("CreatureDrop", hrp)
                        dgl(hrp)
                    end
                end)
            end
            task.wait(0.2) 
        end
    end
})

BlobTab:AddSection({
    Name = "----BlobSettings------"
})

BlobTab:AddSlider({
	Name = "BlobSpeed",
	Min = 20,
	Max = 1000,
	Default = 20,
	Color = Color3.fromRGB(142, 69, 133),
	Increment = 1,
	ValueName = "Value",
	Callback = function(Value)
		Valores.BlobSpeed = Value
        BSpeed()
	end    
})

BlobTab:AddToggle({
	Name = "Two Hands",
	Default = false,
	Callback = function(Value)
		Toggle.MaosBlobs = Value
	end    
})

BlobTab:AddToggle({
	Name = "Silence Mode",
	Default = false,
	Callback = function(Value)
		Toggle.SecretBlob = Value
	end    
})

BlobTab:AddSection({
    Name = "Toggles And That Stuff"
})

BlobTab:AddToggle({
    Name = "Blob Aura (In Tests)",
    Default = false,
    Callback = function(Value)
        Toggle.BlobAura = Value
        BlobAura()
    end    
})

BlobTab:AddParagraph("!!ATTENTION!!","For more features, please consult the Settings tab.")

looptab:AddParagraphPosition("Loop Tab", "     ----------------- Loop Tab ------------------\n     In Work!", "Center")

looptab:AddSection({
    Name = ""
})

LoopTable.LPDropdown = looptab:AddDropdown({
    Name = "Select Player",
    Options = LoopTable:GetPlayerNames(),
    Callback = function(selected)
        Connections.selectedPlayer5 = selected
    end
})

looptab:AddButton({
    Name = "Add",
    Callback = function()
        local player = LoopTable:FindPlayerByFullName(Connections.selectedPlayer5)
        LoopTable:AddToLoopList(player) 
        LoopTable.LPDropdown:Set(nil)
        LoopTable:UpdateLoopListDropdown()
    end
})

looptab:AddSection({
    Name = "----------"
})


LoopTable.LDropdown = looptab:AddDropdown({
    Name = "Loop List", 
    Options = {},
    Callback = function(selected)
        Connections.selectedPlayer5 = selected
    end
})

looptab:AddButton({
    Name = "Remove",
    Callback = function()
        local player = LoopTable:FindPlayerByFullName(Connections.selectedPlayer5)
        LoopTable:RemoveFromLoopList(player)
        LoopTable:UpdateLoopListDropdown()  
        LoopTable.LDropdown:Set(nil)
    end
})

looptab:AddSection({
    Name = "------ Toggles ------"
})

looptab:AddToggle({
    Name = "Loop kick",
    Default = false,
    Callback = function(isEnabled)
        Toggle.BlobKick = isEnabled

        if Toggle.BlobKick then
            for _, player in pairs(LoopTable.LoopList) do
                LoopDropAndGrab(player)
            end
        end
    end    
})

looptab:AddToggle({
    Name = "Loop Rangdoll",
    Default = false,
    Callback = function(Value)
        Toggle.LoopRagdollWhitelist = Value
        while Toggle.LoopRagdollWhitelist == true do
            updateBananaPosition("looplistplayers")
        end
    end    
})

AutoTab:AddParagraphPosition("Auto Tab", "--------------------------------------------------", "Center")
AutoTab:AddSection({
    Name = "Auto Time-Reset"
})

AutoTab:AddToggle({
	Name = "Preserve Time",
	Default = false,
	Callback = function(Value)
		Toggle.AutoCasa = Value
	end    
})

local TimeLabel = AutoTab:ColoredAddLabel("Plot Time: ", nil, "Center")

task.spawn(function()
    while true do
        for _, house in pairs(Plots:GetChildren()) do
            if table.find(Hnames, house.Name) then
                local ps = house:FindFirstChild("PlotSign")
                if ps then
                    local fr = ps:FindFirstChild("ThisPlotsOwners")
                    if fr then
                        local Vl = fr:FindFirstChild("Value")
                        if Vl and Vl:IsA("StringValue") then
                            local Vl2 = Vl:FindFirstChild("TimeRemainingNum")
                            if Vl2 and Vl2:IsA("IntValue") then
                                if Vl.Value == Vglobais.player.Name then    
                                    if Toggle.AutoCasa then
                                        TimeLabel:Set("Plot Time: " .. Vl2.Value)
                                        if Vl2.Value == 3 then
                                            local plotPosition = plotPositions[house.Name]
                                            if plotPosition then
                                                local humanoidRootPart = OthersV.character:FindFirstChild("HumanoidRootPart")
                                                local psalva = humanoidRootPart.CFrame
                                                if humanoidRootPart then
                                                    humanoidRootPart.CFrame = plotPosition
                                                    task.wait(0.3)
                                                    humanoidRootPart.CFrame = psalva
                                                end 
                                            end
                                        end
                                    else
                                        if Vl2.Value <= 5 then
                                            TimeLabel:Set("Plot Time: " .. Vl2.Value, Color3.fromRGB(255, 0, 0), "Center")
                                        else
                                            TimeLabel:Set("Plot Time: " .. Vl2.Value, nil, "Center")
                                        end
                                    end
                                else
                                    TimeLabel:Set("Plot Time: 0", nil, "Center")
                                end
                            end
                        end
                    end
                end
            end
        end
        task.wait(0.1)
    end
end)

AutoTab:AddSection({
    Name = "Auto Claim-Plot"
})

AutoTab:AddDropdown({
	Name = "Plot",
	Default = "",
	Options = {"Witch House", "Lumber House", "Common House", "American House", "Chinese House"},
	Callback = function(Value)
		Valores.HouseValue = Value
        HouseFunction()
        atualizarlist()
	end    
})

PlotOwners = AutoTab:ColoredAddLabel("Choose a plot first!", nil, "Left")
PlotPeople = AutoTab:ColoredAddLabel("Choose a plot first!", nil, "Left")
PlotPeopleList = AutoTab:AddParagraphPosition("Names", 
" ", 
"Center"
)

AutoTab:AddButton({
	Name = "Claim Plot!",
	Callback = function()
      	ClaimPlot()
  	end    
})

coroutine.wrap(UpdateDropdown)()

Vglobais.Players.PlayerAdded:Connect(function(player)
    if dropdown2 then 
        dropdown2:Refresh(GetPlayerList(), true)  
    end
    if LoopTable.LPDropdown then 
        LoopTable.LPDropdown:Refresh(GetPlayerList(), true)  
    end
end)

Vglobais.Players.PlayerRemoving:Connect(function(player)
    if dropdown2 then 
        dropdown2:Refresh(GetPlayerList(), true)  
    end
    if LoopTable.LPDropdown then 
        LoopTable.LPDropdown:Refresh(GetPlayerList(), true)
    end
    LoopTable:UpdateLoopListDropdown()
    for i, loopPlayer in ipairs(Valores.LoopKick) do
        if loopPlayer == player then
            table.remove(Valores.LoopKick, i)
            break
        end
    end
end)

restoreOriginalColors()
startGrabbingCheck()
maintenanceLoop()
Loopctab()
OrionLib:Init()
